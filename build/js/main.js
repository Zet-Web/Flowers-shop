function centerModals(){$(".modal").each(function(e){var t=$(this).clone().css("display","block").appendTo("body"),n=Math.round((t.height()-t.find(".modal-content").height())/2);n=n>0?n:0,t.remove(),$(this).find(".modal-content").css("margin-top",n)})}function trustTumble(){var e=$(".trust_us  .item"),t=$(".trust_us .detail-side .close-button");e.click(function(){return $(".preview-logos").hide(),$(".detail-side").show(),!1}),t.click(function(){$(".preview-logos").show(),$(".detail-side").hide()})}function add_active_class(){var e=$("body"),t=$("header nav ul");e.hasClass("about-us")?t.find("li:nth-of-type(2)").addClass("active_li"):e.hasClass("zal-page")&&t.find("li:nth-of-type(3)").addClass("active_li")}window.google=window.google||{},google.maps=google.maps||{},function(){function e(e){document.write('<script src="'+e+'"></script>')}var t=google.maps.modules={};google.maps.__gjsload__=function(e,n){t[e]=n},google.maps.Load=function(e){delete google.maps.Load,e([.009999999776482582,[[["https://mts0.googleapis.com/vt?lyrs=m@306000000&src=api&hl=ru-RU&","https://mts1.googleapis.com/vt?lyrs=m@306000000&src=api&hl=ru-RU&"],null,null,null,null,"m@306000000",["https://mts0.google.com/vt?lyrs=m@306000000&src=api&hl=ru-RU&","https://mts1.google.com/vt?lyrs=m@306000000&src=api&hl=ru-RU&"]],[["https://khms0.googleapis.com/kh?v=174&hl=ru-RU&","https://khms1.googleapis.com/kh?v=174&hl=ru-RU&"],null,null,null,1,"174",["https://khms0.google.com/kh?v=174&hl=ru-RU&","https://khms1.google.com/kh?v=174&hl=ru-RU&"]],[["https://mts0.googleapis.com/vt?lyrs=h@306000000&src=api&hl=ru-RU&","https://mts1.googleapis.com/vt?lyrs=h@306000000&src=api&hl=ru-RU&"],null,null,null,null,"h@306000000",["https://mts0.google.com/vt?lyrs=h@306000000&src=api&hl=ru-RU&","https://mts1.google.com/vt?lyrs=h@306000000&src=api&hl=ru-RU&"]],[["https://mts0.googleapis.com/vt?lyrs=t@132,r@306000000&src=api&hl=ru-RU&","https://mts1.googleapis.com/vt?lyrs=t@132,r@306000000&src=api&hl=ru-RU&"],null,null,null,null,"t@132,r@306000000",["https://mts0.google.com/vt?lyrs=t@132,r@306000000&src=api&hl=ru-RU&","https://mts1.google.com/vt?lyrs=t@132,r@306000000&src=api&hl=ru-RU&"]],null,null,[["https://cbks0.googleapis.com/cbk?","https://cbks1.googleapis.com/cbk?"]],[["https://khms0.googleapis.com/kh?v=86&hl=ru-RU&","https://khms1.googleapis.com/kh?v=86&hl=ru-RU&"],null,null,null,null,"86",["https://khms0.google.com/kh?v=86&hl=ru-RU&","https://khms1.google.com/kh?v=86&hl=ru-RU&"]],[["https://mts0.googleapis.com/mapslt?hl=ru-RU&","https://mts1.googleapis.com/mapslt?hl=ru-RU&"]],[["https://mts0.googleapis.com/mapslt/ft?hl=ru-RU&","https://mts1.googleapis.com/mapslt/ft?hl=ru-RU&"]],[["https://mts0.googleapis.com/vt?hl=ru-RU&","https://mts1.googleapis.com/vt?hl=ru-RU&"]],[["https://mts0.googleapis.com/mapslt/loom?hl=ru-RU&","https://mts1.googleapis.com/mapslt/loom?hl=ru-RU&"]],[["https://mts0.googleapis.com/mapslt?hl=ru-RU&","https://mts1.googleapis.com/mapslt?hl=ru-RU&"]],[["https://mts0.googleapis.com/mapslt/ft?hl=ru-RU&","https://mts1.googleapis.com/mapslt/ft?hl=ru-RU&"]],[["https://mts0.googleapis.com/mapslt/loom?hl=ru-RU&","https://mts1.googleapis.com/mapslt/loom?hl=ru-RU&"]]],["ru-RU","US",null,0,null,null,"https://maps.gstatic.com/mapfiles/","https://csi.gstatic.com","https://maps.googleapis.com","https://maps.googleapis.com",null,"https://maps.google.com","https://gg.google.com","https://maps.gstatic.com/maps-api-v3/api/images/","https://www.google.com/maps",0],["https://maps.gstatic.com/maps-api-v3/api/js/21/3/intl/ru_ALL","3.21.3"],[141790386],1,null,null,null,null,null,"",null,null,1,"https://khms.googleapis.com/mz?v=174&",null,"https://earthbuilder.googleapis.com","https://earthbuilder.googleapis.com",null,"https://mts.googleapis.com/vt/icon",[["https://mts0.googleapis.com/vt","https://mts1.googleapis.com/vt"],["https://mts0.googleapis.com/vt","https://mts1.googleapis.com/vt"],null,null,null,null,null,null,null,null,null,null,["https://mts0.google.com/vt","https://mts1.google.com/vt"],"/maps/vt",306e6,132],2,500,[null,"https://g0.gstatic.com/landmark/tour","https://g0.gstatic.com/landmark/config",null,"https://www.google.com/maps/preview/log204","","https://static.panoramio.com.storage.googleapis.com/photos/",["https://geo0.ggpht.com/cbk","https://geo1.ggpht.com/cbk","https://geo2.ggpht.com/cbk","https://geo3.ggpht.com/cbk"]],["https://www.google.com/maps/api/js/master?pb=!1m2!1u21!2s3!2sru-RU!3sUS!4s21/3/intl/ru_ALL","https://www.google.com/maps/api/js/widget?pb=!1m2!1u21!2s3!2sru-RU"],null,0,0,"/maps/api/js/ApplicationService.GetEntityDetails",0],n)};var n=(new Date).getTime();e("https://maps.gstatic.com/maps-api-v3/api/js/21/3/intl/ru_ALL/main.js")}(),function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t="length"in e&&e.length,n=J.type(e);return"function"===n||J.isWindow(e)?!1:1===e.nodeType&&t?!0:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function i(e,t,n){if(J.isFunction(t))return J.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return J.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(oe.test(t))return J.filter(t,e,n);t=J.filter(t,e)}return J.grep(e,function(e){return V.call(t,e)>=0!==n})}function r(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t=fe[e]={};return J.each(e.match(he)||[],function(e,n){t[n]=!0}),t}function a(){Z.removeEventListener("DOMContentLoaded",a,!1),e.removeEventListener("load",a,!1),J.ready()}function o(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=J.expando+o.uid++}function l(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(xe,"-$1").toLowerCase(),n=e.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:we.test(n)?J.parseJSON(n):n}catch(r){}ye.set(e,t,n)}else n=void 0;return n}function p(){return!0}function c(){return!1}function u(){try{return Z.activeElement}catch(e){}}function d(e,t){return J.nodeName(e,"table")&&J.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function h(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function f(e){var t=Oe.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function m(e,t){for(var n=0,i=e.length;i>n;n++)ve.set(e[n],"globalEval",!t||ve.get(t[n],"globalEval"))}function g(e,t){var n,i,r,s,a,o,l,p;if(1===t.nodeType){if(ve.hasData(e)&&(s=ve.access(e),a=ve.set(t,s),p=s.events)){delete a.handle,a.events={};for(r in p)for(n=0,i=p[r].length;i>n;n++)J.event.add(t,r,p[r][n])}ye.hasData(e)&&(o=ye.access(e),l=J.extend({},o),ye.set(t,l))}}function v(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||"*"):e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&J.nodeName(e,t)?J.merge([e],n):n}function y(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Se.test(e.type)?t.checked=e.checked:("input"===n||"textarea"===n)&&(t.defaultValue=e.defaultValue)}function w(t,n){var i,r=J(n.createElement(t)).appendTo(n.body),s=e.getDefaultComputedStyle&&(i=e.getDefaultComputedStyle(r[0]))?i.display:J.css(r[0],"display");return r.detach(),s}function x(e){var t=Z,n=$e[e];return n||(n=w(e,t),"none"!==n&&n||(Be=(Be||J("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=Be[0].contentDocument,t.write(),t.close(),n=w(e,t),Be.detach()),$e[e]=n),n}function b(e,t,n){var i,r,s,a,o=e.style;return n=n||We(e),n&&(a=n.getPropertyValue(t)||n[t]),n&&(""!==a||J.contains(e.ownerDocument,e)||(a=J.style(e,t)),qe.test(a)&&He.test(t)&&(i=o.width,r=o.minWidth,s=o.maxWidth,o.minWidth=o.maxWidth=o.width=a,a=n.width,o.width=i,o.minWidth=r,o.maxWidth=s)),void 0!==a?a+"":a}function C(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function T(e,t){if(t in e)return t;for(var n=t[0].toUpperCase()+t.slice(1),i=t,r=Ye.length;r--;)if(t=Ye[r]+n,t in e)return t;return i}function S(e,t,n){var i=Ge.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function k(e,t,n,i,r){for(var s=n===(i?"border":"content")?4:"width"===t?1:0,a=0;4>s;s+=2)"margin"===n&&(a+=J.css(e,n+Ce[s],!0,r)),i?("content"===n&&(a-=J.css(e,"padding"+Ce[s],!0,r)),"margin"!==n&&(a-=J.css(e,"border"+Ce[s]+"Width",!0,r))):(a+=J.css(e,"padding"+Ce[s],!0,r),"padding"!==n&&(a+=J.css(e,"border"+Ce[s]+"Width",!0,r)));return a}function _(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,s=We(e),a="border-box"===J.css(e,"boxSizing",!1,s);if(0>=r||null==r){if(r=b(e,t,s),(0>r||null==r)&&(r=e.style[t]),qe.test(r))return r;i=a&&(K.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+k(e,t,n||(a?"border":"content"),i,s)+"px"}function E(e,t){for(var n,i,r,s=[],a=0,o=e.length;o>a;a++)i=e[a],i.style&&(s[a]=ve.get(i,"olddisplay"),n=i.style.display,t?(s[a]||"none"!==n||(i.style.display=""),""===i.style.display&&Te(i)&&(s[a]=ve.access(i,"olddisplay",x(i.nodeName)))):(r=Te(i),"none"===n&&r||ve.set(i,"olddisplay",r?n:J.css(i,"display"))));for(a=0;o>a;a++)i=e[a],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?s[a]||"":"none"));return e}function M(e,t,n,i,r){return new M.prototype.init(e,t,n,i,r)}function P(){return setTimeout(function(){Ke=void 0}),Ke=J.now()}function L(e,t){var n,i=0,r={height:e};for(t=t?1:0;4>i;i+=2-t)n=Ce[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function D(e,t,n){for(var i,r=(nt[t]||[]).concat(nt["*"]),s=0,a=r.length;a>s;s++)if(i=r[s].call(n,t,e))return i}function I(e,t,n){var i,r,s,a,o,l,p,c,u=this,d={},h=e.style,f=e.nodeType&&Te(e),m=ve.get(e,"fxshow");n.queue||(o=J._queueHooks(e,"fx"),null==o.unqueued&&(o.unqueued=0,l=o.empty.fire,o.empty.fire=function(){o.unqueued||l()}),o.unqueued++,u.always(function(){u.always(function(){o.unqueued--,J.queue(e,"fx").length||o.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],p=J.css(e,"display"),c="none"===p?ve.get(e,"olddisplay")||x(e.nodeName):p,"inline"===c&&"none"===J.css(e,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",u.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in t)if(r=t[i],Qe.exec(r)){if(delete t[i],s=s||"toggle"===r,r===(f?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;f=!0}d[i]=m&&m[i]||J.style(e,i)}else p=void 0;if(J.isEmptyObject(d))"inline"===("none"===p?x(e.nodeName):p)&&(h.display=p);else{m?"hidden"in m&&(f=m.hidden):m=ve.access(e,"fxshow",{}),s&&(m.hidden=!f),f?J(e).show():u.done(function(){J(e).hide()}),u.done(function(){var t;ve.remove(e,"fxshow");for(t in d)J.style(e,t,d[t])});for(i in d)a=D(f?m[i]:0,i,u),i in m||(m[i]=a.start,f&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}}function N(e,t){var n,i,r,s,a;for(n in e)if(i=J.camelCase(n),r=t[i],s=e[n],J.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),a=J.cssHooks[i],a&&"expand"in a){s=a.expand(s),delete e[i];for(n in s)n in e||(e[n]=s[n],t[n]=r)}else t[i]=r}function A(e,t,n){var i,r,s=0,a=tt.length,o=J.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=Ke||P(),n=Math.max(0,p.startTime+p.duration-t),i=n/p.duration||0,s=1-i,a=0,l=p.tweens.length;l>a;a++)p.tweens[a].run(s);return o.notifyWith(e,[p,s,n]),1>s&&l?n:(o.resolveWith(e,[p]),!1)},p=o.promise({elem:e,props:J.extend({},t),opts:J.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:Ke||P(),duration:n.duration,tweens:[],createTween:function(t,n){var i=J.Tween(e,p.opts,t,n,p.opts.specialEasing[t]||p.opts.easing);return p.tweens.push(i),i},stop:function(t){var n=0,i=t?p.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)p.tweens[n].run(1);return t?o.resolveWith(e,[p,t]):o.rejectWith(e,[p,t]),this}}),c=p.props;for(N(c,p.opts.specialEasing);a>s;s++)if(i=tt[s].call(p,e,c,p.opts))return i;return J.map(c,D,p),J.isFunction(p.opts.start)&&p.opts.start.call(e,p),J.fx.timer(J.extend(l,{elem:e,anim:p,queue:p.opts.queue})),p.progress(p.opts.progress).done(p.opts.done,p.opts.complete).fail(p.opts.fail).always(p.opts.always)}function z(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,s=t.toLowerCase().match(he)||[];if(J.isFunction(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function O(e,t,n,i){function r(o){var l;return s[o]=!0,J.each(e[o]||[],function(e,o){var p=o(t,n,i);return"string"!=typeof p||a||s[p]?a?!(l=p):void 0:(t.dataTypes.unshift(p),r(p),!1)}),l}var s={},a=e===wt;return r(t.dataTypes[0])||!s["*"]&&r("*")}function j(e,t){var n,i,r=J.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&J.extend(!0,e,i),e}function R(e,t,n){for(var i,r,s,a,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in o)if(o[r]&&o[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}a||(a=r)}s=s||a}return s?(s!==l[0]&&l.unshift(s),n[s]):void 0}function B(e,t,n,i){var r,s,a,o,l,p={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)p[a.toLowerCase()]=e.converters[a];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(a=p[l+" "+s]||p["* "+s],!a)for(r in p)if(o=r.split(" "),o[1]===s&&(a=p[l+" "+o[0]]||p["* "+o[0]])){a===!0?a=p[r]:p[r]!==!0&&(s=o[0],c.unshift(o[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(u){return{state:"parsererror",error:a?u:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}function $(e,t,n,i){var r;if(J.isArray(t))J.each(t,function(t,r){n||St.test(e)?i(e,r):$(e+"["+("object"==typeof r?t:"")+"]",r,n,i)});else if(n||"object"!==J.type(t))i(e,t);else for(r in t)$(e+"["+r+"]",t[r],n,i)}function H(e){return J.isWindow(e)?e:9===e.nodeType&&e.defaultView}var q=[],W=q.slice,F=q.concat,G=q.push,V=q.indexOf,X={},U=X.toString,Y=X.hasOwnProperty,K={},Z=e.document,Q="2.1.4",J=function(e,t){return new J.fn.init(e,t)},ee=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,te=/^-ms-/,ne=/-([\da-z])/gi,ie=function(e,t){return t.toUpperCase()};J.fn=J.prototype={jquery:Q,constructor:J,selector:"",length:0,toArray:function(){return W.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:W.call(this)},pushStack:function(e){var t=J.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return J.each(this,e,t)},map:function(e){return this.pushStack(J.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(W.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:G,sort:q.sort,splice:q.splice},J.extend=J.fn.extend=function(){var e,t,n,i,r,s,a=arguments[0]||{},o=1,l=arguments.length,p=!1;for("boolean"==typeof a&&(p=a,a=arguments[o]||{},o++),"object"==typeof a||J.isFunction(a)||(a={}),o===l&&(a=this,o--);l>o;o++)if(null!=(e=arguments[o]))for(t in e)n=a[t],i=e[t],a!==i&&(p&&i&&(J.isPlainObject(i)||(r=J.isArray(i)))?(r?(r=!1,s=n&&J.isArray(n)?n:[]):s=n&&J.isPlainObject(n)?n:{},a[t]=J.extend(p,s,i)):void 0!==i&&(a[t]=i));return a},J.extend({expando:"jQuery"+(Q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===J.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!J.isArray(e)&&e-parseFloat(e)+1>=0},isPlainObject:function(e){return"object"!==J.type(e)||e.nodeType||J.isWindow(e)?!1:e.constructor&&!Y.call(e.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?X[U.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;e=J.trim(e),e&&(1===e.indexOf("use strict")?(t=Z.createElement("script"),t.text=e,Z.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(te,"ms-").replace(ne,ie)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,i){var r,s=0,a=e.length,o=n(e);if(i){if(o)for(;a>s&&(r=t.apply(e[s],i),r!==!1);s++);else for(s in e)if(r=t.apply(e[s],i),r===!1)break}else if(o)for(;a>s&&(r=t.call(e[s],s,e[s]),r!==!1);s++);else for(s in e)if(r=t.call(e[s],s,e[s]),r===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ee,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?J.merge(i,"string"==typeof e?[e]:e):G.call(i,e)),i},inArray:function(e,t,n){return null==t?-1:V.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;n>i;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i,r=[],s=0,a=e.length,o=!n;a>s;s++)i=!t(e[s],s),i!==o&&r.push(e[s]);return r},map:function(e,t,i){var r,s=0,a=e.length,o=n(e),l=[];if(o)for(;a>s;s++)r=t(e[s],s,i),null!=r&&l.push(r);else for(s in e)r=t(e[s],s,i),null!=r&&l.push(r);return F.apply([],l)},guid:1,proxy:function(e,t){var n,i,r;return"string"==typeof t&&(n=e[t],t=e,e=n),J.isFunction(e)?(i=W.call(arguments,2),r=function(){return e.apply(t||this,i.concat(W.call(arguments)))},r.guid=e.guid=e.guid||J.guid++,r):void 0},now:Date.now,support:K}),J.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){X["[object "+t+"]"]=t.toLowerCase()});var re=function(e){function t(e,t,n,i){var r,s,a,o,l,p,u,h,f,m;if((t?t.ownerDocument||t:$)!==I&&D(t),t=t||I,n=n||[],o=t.nodeType,"string"!=typeof e||!e||1!==o&&9!==o&&11!==o)return n;if(!i&&A){if(11!==o&&(r=ye.exec(e)))if(a=r[1]){if(9===o){if(s=t.getElementById(a),!s||!s.parentNode)return n;if(s.id===a)return n.push(s),n}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(a))&&R(t,s)&&s.id===a)return n.push(s),n}else{if(r[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((a=r[3])&&b.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(a)),n}if(b.qsa&&(!z||!z.test(e))){if(h=u=B,f=t,m=1!==o&&e,1===o&&"object"!==t.nodeName.toLowerCase()){for(p=k(e),(u=t.getAttribute("id"))?h=u.replace(xe,"\\$&"):t.setAttribute("id",h),h="[id='"+h+"'] ",l=p.length;l--;)p[l]=h+d(p[l]);f=we.test(e)&&c(t.parentNode)||t,m=p.join(",")}if(m)try{return Q.apply(n,f.querySelectorAll(m)),n}catch(g){}finally{u||t.removeAttribute("id")}}}return E(e.replace(le,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[B]=!0,e}function r(e){var t=I.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function s(e,t){for(var n=e.split("|"),i=e.length;i--;)C.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||X)-(~e.sourceIndex||X);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function o(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function p(e){return i(function(t){return t=+t,i(function(n,i){for(var r,s=e([],n.length,t),a=s.length;a--;)n[r=s[a]]&&(n[r]=!(i[r]=n[r]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function u(){}function d(e){for(var t=0,n=e.length,i="";n>t;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,r=n&&"parentNode"===i,s=q++;return t.first?function(t,n,s){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,s)}:function(t,n,a){var o,l,p=[H,s];if(a){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,a))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if(l=t[B]||(t[B]={}),(o=l[i])&&o[0]===H&&o[1]===s)return p[2]=o[2];if(l[i]=p,p[2]=e(t,n,a))return!0}}}function f(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function m(e,n,i){for(var r=0,s=n.length;s>r;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var s,a=[],o=0,l=e.length,p=null!=t;l>o;o++)(s=e[o])&&(!n||n(s,i,r))&&(a.push(s),p&&t.push(o));return a}function v(e,t,n,r,s,a){return r&&!r[B]&&(r=v(r)),s&&!s[B]&&(s=v(s,a)),i(function(i,a,o,l){var p,c,u,d=[],h=[],f=a.length,v=i||m(t||"*",o.nodeType?[o]:o,[]),y=!e||!i&&t?v:g(v,d,e,o,l),w=n?s||(i?e:f||r)?[]:a:y;if(n&&n(y,w,o,l),r)for(p=g(w,h),r(p,[],o,l),c=p.length;c--;)(u=p[c])&&(w[h[c]]=!(y[h[c]]=u));if(i){if(s||e){if(s){for(p=[],c=w.length;c--;)(u=w[c])&&p.push(y[c]=u);s(null,w=[],p,l)}for(c=w.length;c--;)(u=w[c])&&(p=s?ee(i,u):d[c])>-1&&(i[p]=!(a[p]=u))}}else w=g(w===a?w.splice(f,w.length):w),s?s(null,a,w,l):Q.apply(a,w)})}function y(e){for(var t,n,i,r=e.length,s=C.relative[e[0].type],a=s||C.relative[" "],o=s?1:0,l=h(function(e){return e===t},a,!0),p=h(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,i){var r=!s&&(i||n!==M)||((t=n).nodeType?l(e,n,i):p(e,n,i));return t=null,r}];r>o;o++)if(n=C.relative[e[o].type])c=[h(f(c),n)];else{if(n=C.filter[e[o].type].apply(null,e[o].matches),n[B]){for(i=++o;r>i&&!C.relative[e[i].type];i++);return v(o>1&&f(c),o>1&&d(e.slice(0,o-1).concat({value:" "===e[o-2].type?"*":""})).replace(le,"$1"),n,i>o&&y(e.slice(o,i)),r>i&&y(e=e.slice(i)),r>i&&d(e))}c.push(n)}return f(c)}function w(e,n){var r=n.length>0,s=e.length>0,a=function(i,a,o,l,p){var c,u,d,h=0,f="0",m=i&&[],v=[],y=M,w=i||s&&C.find.TAG("*",p),x=H+=null==y?1:Math.random()||.1,b=w.length;for(p&&(M=a!==I&&a);f!==b&&null!=(c=w[f]);f++){if(s&&c){for(u=0;d=e[u++];)if(d(c,a,o)){l.push(c);break}p&&(H=x)}r&&((c=!d&&c)&&h--,i&&m.push(c))}if(h+=f,r&&f!==h){for(u=0;d=n[u++];)d(m,v,a,o);if(i){if(h>0)for(;f--;)m[f]||v[f]||(v[f]=K.call(l));v=g(v)}Q.apply(l,v),p&&!i&&v.length>0&&h+n.length>1&&t.uniqueSort(l)}return p&&(H=x,M=y),m};return r?i(a):a}var x,b,C,T,S,k,_,E,M,P,L,D,I,N,A,z,O,j,R,B="sizzle"+1*new Date,$=e.document,H=0,q=0,W=n(),F=n(),G=n(),V=function(e,t){return e===t&&(L=!0),0},X=1<<31,U={}.hasOwnProperty,Y=[],K=Y.pop,Z=Y.push,Q=Y.push,J=Y.slice,ee=function(e,t){for(var n=0,i=e.length;i>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",re=ie.replace("w","w#"),se="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",ae=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+se+")*)|.*)\\)|)",oe=new RegExp(ne+"+","g"),le=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),pe=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ue=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(ae),he=new RegExp("^"+re+"$"),fe={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie.replace("w","w*")+")"),ATTR:new RegExp("^"+se),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},me=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,we=/[+~]/,xe=/'|\\/g,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Ce=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},Te=function(){D()};try{Q.apply(Y=J.call($.childNodes),$.childNodes),Y[$.childNodes.length].nodeType}catch(Se){Q={apply:Y.length?function(e,t){Z.apply(e,J.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}b=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},D=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:$;return i!==I&&9===i.nodeType&&i.documentElement?(I=i,N=i.documentElement,n=i.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Te,!1):n.attachEvent&&n.attachEvent("onunload",Te)),A=!S(i),b.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),b.getElementsByTagName=r(function(e){return e.appendChild(i.createComment("")),!e.getElementsByTagName("*").length}),b.getElementsByClassName=ve.test(i.getElementsByClassName),b.getById=r(function(e){return N.appendChild(e).id=B,!i.getElementsByName||!i.getElementsByName(B).length}),b.getById?(C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&A){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},C.filter.ID=function(e){var t=e.replace(be,Ce);return function(e){return e.getAttribute("id")===t}}):(delete C.find.ID,C.filter.ID=function(e){var t=e.replace(be,Ce);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),C.find.TAG=b.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):b.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},C.find.CLASS=b.getElementsByClassName&&function(e,t){return A?t.getElementsByClassName(e):void 0},O=[],z=[],(b.qsa=ve.test(i.querySelectorAll))&&(r(function(e){N.appendChild(e).innerHTML="<a id='"+B+"'></a><select id='"+B+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&z.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||z.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+B+"-]").length||z.push("~="),e.querySelectorAll(":checked").length||z.push(":checked"),e.querySelectorAll("a#"+B+"+*").length||z.push(".#.+[+~]")}),r(function(e){var t=i.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&z.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||z.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),z.push(",.*:")})),(b.matchesSelector=ve.test(j=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&r(function(e){b.disconnectedMatch=j.call(e,"div"),j.call(e,"[s!='']:x"),O.push("!=",ae)}),z=z.length&&new RegExp(z.join("|")),O=O.length&&new RegExp(O.join("|")),t=ve.test(N.compareDocumentPosition),R=t||ve.test(N.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},V=t?function(e,t){if(e===t)return L=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!b.sortDetached&&t.compareDocumentPosition(e)===n?e===i||e.ownerDocument===$&&R($,e)?-1:t===i||t.ownerDocument===$&&R($,t)?1:P?ee(P,e)-ee(P,t):0:4&n?-1:1)}:function(e,t){if(e===t)return L=!0,0;var n,r=0,s=e.parentNode,o=t.parentNode,l=[e],p=[t];if(!s||!o)return e===i?-1:t===i?1:s?-1:o?1:P?ee(P,e)-ee(P,t):0;if(s===o)return a(e,t);for(n=e;n=n.parentNode;)l.unshift(n);for(n=t;n=n.parentNode;)p.unshift(n);for(;l[r]===p[r];)r++;return r?a(l[r],p[r]):l[r]===$?-1:p[r]===$?1:0},i):I},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==I&&D(e),n=n.replace(ue,"='$1']"),!(!b.matchesSelector||!A||O&&O.test(n)||z&&z.test(n)))try{var i=j.call(e,n);if(i||b.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(r){}return t(n,I,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==I&&D(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==I&&D(e);var n=C.attrHandle[t.toLowerCase()],i=n&&U.call(C.attrHandle,t.toLowerCase())?n(e,t,!A):void 0;return void 0!==i?i:b.attributes||!A?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(L=!b.detectDuplicates,P=!b.sortStable&&e.slice(0),e.sort(V),L){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return P=null,e},T=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=T(t);return n},C=t.selectors={cacheLength:50,createPseudo:i,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,Ce),e[3]=(e[3]||e[4]||e[5]||"").replace(be,Ce),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=k(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,Ce).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var s=t.attr(r,e);return null==s?"!="===n:n?(s+="","="===n?s===i:"!="===n?s!==i:"^="===n?i&&0===s.indexOf(i):"*="===n?i&&s.indexOf(i)>-1:"$="===n?i&&s.slice(-i.length)===i:"~="===n?(" "+s.replace(oe," ")+" ").indexOf(i)>-1:"|="===n?s===i||s.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(e,t,n,i,r){var s="nth"!==e.slice(0,3),a="last"!==e.slice(-4),o="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var p,c,u,d,h,f,m=s!==a?"nextSibling":"previousSibling",g=t.parentNode,v=o&&t.nodeName.toLowerCase(),y=!l&&!o;if(g){if(s){for(;m;){for(u=t;u=u[m];)if(o?u.nodeName.toLowerCase()===v:1===u.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[a?g.firstChild:g.lastChild],a&&y){for(c=g[B]||(g[B]={}),p=c[e]||[],h=p[0]===H&&p[1],d=p[0]===H&&p[2],u=h&&g.childNodes[h];u=++h&&u&&u[m]||(d=h=0)||f.pop();)if(1===u.nodeType&&++d&&u===t){c[e]=[H,h,d];break}}else if(y&&(p=(t[B]||(t[B]={}))[e])&&p[0]===H)d=p[1];else for(;(u=++h&&u&&u[m]||(d=h=0)||f.pop())&&((o?u.nodeName.toLowerCase()!==v:1!==u.nodeType)||!++d||(y&&((u[B]||(u[B]={}))[e]=[H,d]),u!==t)););return d-=r,d===i||d%i===0&&d/i>=0}}},PSEUDO:function(e,n){var r,s=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return s[B]?s(n):s.length>1?(r=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=s(e,n),a=r.length;a--;)i=ee(e,r[a]),e[i]=!(t[i]=r[a])}):function(e){return s(e,0,r)}):s}},pseudos:{not:i(function(e){var t=[],n=[],r=_(e.replace(le,"$1"));return r[B]?i(function(e,t,n,i){for(var s,a=r(e,null,i,[]),o=e.length;o--;)(s=a[o])&&(e[o]=!(t[o]=s));

}):function(e,i,s){return t[0]=e,r(t,null,s,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(be,Ce),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:i(function(e){return he.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,Ce).toLowerCase(),function(t){var n;do if(n=A?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===N},focus:function(e){return e===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return me.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:p(function(){return[0]}),last:p(function(e,t){return[t-1]}),eq:p(function(e,t,n){return[0>n?n+t:n]}),even:p(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:p(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:p(function(e,t,n){for(var i=0>n?n+t:n;--i>=0;)e.push(i);return e}),gt:p(function(e,t,n){for(var i=0>n?n+t:n;++i<t;)e.push(i);return e})}},C.pseudos.nth=C.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[x]=o(x);for(x in{submit:!0,reset:!0})C.pseudos[x]=l(x);return u.prototype=C.filters=C.pseudos,C.setFilters=new u,k=t.tokenize=function(e,n){var i,r,s,a,o,l,p,c=F[e+" "];if(c)return n?0:c.slice(0);for(o=e,l=[],p=C.preFilter;o;){(!i||(r=pe.exec(o)))&&(r&&(o=o.slice(r[0].length)||o),l.push(s=[])),i=!1,(r=ce.exec(o))&&(i=r.shift(),s.push({value:i,type:r[0].replace(le," ")}),o=o.slice(i.length));for(a in C.filter)!(r=fe[a].exec(o))||p[a]&&!(r=p[a](r))||(i=r.shift(),s.push({value:i,type:a,matches:r}),o=o.slice(i.length));if(!i)break}return n?o.length:o?t.error(e):F(e,l).slice(0)},_=t.compile=function(e,t){var n,i=[],r=[],s=G[e+" "];if(!s){for(t||(t=k(e)),n=t.length;n--;)s=y(t[n]),s[B]?i.push(s):r.push(s);s=G(e,w(r,i)),s.selector=e}return s},E=t.select=function(e,t,n,i){var r,s,a,o,l,p="function"==typeof e&&e,u=!i&&k(e=p.selector||e);if(n=n||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(a=s[0]).type&&b.getById&&9===t.nodeType&&A&&C.relative[s[1].type]){if(t=(C.find.ID(a.matches[0].replace(be,Ce),t)||[])[0],!t)return n;p&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(r=fe.needsContext.test(e)?0:s.length;r--&&(a=s[r],!C.relative[o=a.type]);)if((l=C.find[o])&&(i=l(a.matches[0].replace(be,Ce),we.test(s[0].type)&&c(t.parentNode)||t))){if(s.splice(r,1),e=i.length&&d(s),!e)return Q.apply(n,i),n;break}}return(p||_(e,u))(i,t,!A,n,we.test(e)&&c(t.parentNode)||t),n},b.sortStable=B.split("").sort(V).join("")===B,b.detectDuplicates=!!L,D(),b.sortDetached=r(function(e){return 1&e.compareDocumentPosition(I.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||s("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),b.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||s("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||s(te,function(e,t,n){var i;return n?void 0:e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);J.find=re,J.expr=re.selectors,J.expr[":"]=J.expr.pseudos,J.unique=re.uniqueSort,J.text=re.getText,J.isXMLDoc=re.isXML,J.contains=re.contains;var se=J.expr.match.needsContext,ae=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,oe=/^.[^:#\[\.,]*$/;J.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?J.find.matchesSelector(i,e)?[i]:[]:J.find.matches(e,J.grep(t,function(e){return 1===e.nodeType}))},J.fn.extend({find:function(e){var t,n=this.length,i=[],r=this;if("string"!=typeof e)return this.pushStack(J(e).filter(function(){for(t=0;n>t;t++)if(J.contains(r[t],this))return!0}));for(t=0;n>t;t++)J.find(e,r[t],i);return i=this.pushStack(n>1?J.unique(i):i),i.selector=this.selector?this.selector+" "+e:e,i},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&se.test(e)?J(e):e||[],!1).length}});var le,pe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ce=J.fn.init=function(e,t){var n,i;if(!e)return this;if("string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:pe.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||le).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof J?t[0]:t,J.merge(this,J.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:Z,!0)),ae.test(n[1])&&J.isPlainObject(t))for(n in t)J.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return i=Z.getElementById(n[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=Z,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):J.isFunction(e)?"undefined"!=typeof le.ready?le.ready(e):e(J):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),J.makeArray(e,this))};ce.prototype=J.fn,le=J(Z);var ue=/^(?:parents|prev(?:Until|All))/,de={children:!0,contents:!0,next:!0,prev:!0};J.extend({dir:function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&J(e).is(n))break;i.push(e)}return i},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),J.fn.extend({has:function(e){var t=J(e,this),n=t.length;return this.filter(function(){for(var e=0;n>e;e++)if(J.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,s=[],a=se.test(e)||"string"!=typeof e?J(e,t||this.context):0;r>i;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&J.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?J.unique(s):s)},index:function(e){return e?"string"==typeof e?V.call(J(e),this[0]):V.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(J.unique(J.merge(this.get(),J(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),J.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return J.dir(e,"parentNode")},parentsUntil:function(e,t,n){return J.dir(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return J.dir(e,"nextSibling")},prevAll:function(e){return J.dir(e,"previousSibling")},nextUntil:function(e,t,n){return J.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return J.dir(e,"previousSibling",n)},siblings:function(e){return J.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return J.sibling(e.firstChild)},contents:function(e){return e.contentDocument||J.merge([],e.childNodes)}},function(e,t){J.fn[e]=function(n,i){var r=J.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=J.filter(i,r)),this.length>1&&(de[e]||J.unique(r),ue.test(e)&&r.reverse()),this.pushStack(r)}});var he=/\S+/g,fe={};J.Callbacks=function(e){e="string"==typeof e?fe[e]||s(e):J.extend({},e);var t,n,i,r,a,o,l=[],p=!e.once&&[],c=function(s){for(t=e.memory&&s,n=!0,o=r||0,r=0,a=l.length,i=!0;l&&a>o;o++)if(l[o].apply(s[0],s[1])===!1&&e.stopOnFalse){t=!1;break}i=!1,l&&(p?p.length&&c(p.shift()):t?l=[]:u.disable())},u={add:function(){if(l){var n=l.length;!function s(t){J.each(t,function(t,n){var i=J.type(n);"function"===i?e.unique&&u.has(n)||l.push(n):n&&n.length&&"string"!==i&&s(n)})}(arguments),i?a=l.length:t&&(r=n,c(t))}return this},remove:function(){return l&&J.each(arguments,function(e,t){for(var n;(n=J.inArray(t,l,n))>-1;)l.splice(n,1),i&&(a>=n&&a--,o>=n&&o--)}),this},has:function(e){return e?J.inArray(e,l)>-1:!(!l||!l.length)},empty:function(){return l=[],a=0,this},disable:function(){return l=p=t=void 0,this},disabled:function(){return!l},lock:function(){return p=void 0,t||u.disable(),this},locked:function(){return!p},fireWith:function(e,t){return!l||n&&!p||(t=t||[],t=[e,t.slice?t.slice():t],i?p.push(t):c(t)),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},J.extend({Deferred:function(e){var t=[["resolve","done",J.Callbacks("once memory"),"resolved"],["reject","fail",J.Callbacks("once memory"),"rejected"],["notify","progress",J.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return J.Deferred(function(n){J.each(t,function(t,s){var a=J.isFunction(e[t])&&e[t];r[s[1]](function(){var e=a&&a.apply(this,arguments);e&&J.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s[0]+"With"](this===i?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?J.extend(e,i):i}},r={};return i.pipe=i.then,J.each(t,function(e,s){var a=s[2],o=s[3];i[s[1]]=a.add,o&&a.add(function(){n=o},t[1^e][2].disable,t[2][2].lock),r[s[0]]=function(){return r[s[0]+"With"](this===r?i:this,arguments),this},r[s[0]+"With"]=a.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,s=W.call(arguments),a=s.length,o=1!==a||e&&J.isFunction(e.promise)?a:0,l=1===o?e:J.Deferred(),p=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?W.call(arguments):r,i===t?l.notifyWith(n,i):--o||l.resolveWith(n,i)}};if(a>1)for(t=new Array(a),n=new Array(a),i=new Array(a);a>r;r++)s[r]&&J.isFunction(s[r].promise)?s[r].promise().done(p(r,i,s)).fail(l.reject).progress(p(r,n,t)):--o;return o||l.resolveWith(i,s),l.promise()}});var me;J.fn.ready=function(e){return J.ready.promise().done(e),this},J.extend({isReady:!1,readyWait:1,holdReady:function(e){e?J.readyWait++:J.ready(!0)},ready:function(e){(e===!0?--J.readyWait:J.isReady)||(J.isReady=!0,e!==!0&&--J.readyWait>0||(me.resolveWith(Z,[J]),J.fn.triggerHandler&&(J(Z).triggerHandler("ready"),J(Z).off("ready"))))}}),J.ready.promise=function(t){return me||(me=J.Deferred(),"complete"===Z.readyState?setTimeout(J.ready):(Z.addEventListener("DOMContentLoaded",a,!1),e.addEventListener("load",a,!1))),me.promise(t)},J.ready.promise();var ge=J.access=function(e,t,n,i,r,s,a){var o=0,l=e.length,p=null==n;if("object"===J.type(n)){r=!0;for(o in n)J.access(e,t,o,n[o],!0,s,a)}else if(void 0!==i&&(r=!0,J.isFunction(i)||(a=!0),p&&(a?(t.call(e,i),t=null):(p=t,t=function(e,t,n){return p.call(J(e),n)})),t))for(;l>o;o++)t(e[o],n,a?i:i.call(e[o],o,t(e[o],n)));return r?e:p?t.call(e):l?t(e[0],n):s};J.acceptData=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType},o.uid=1,o.accepts=J.acceptData,o.prototype={key:function(e){if(!o.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=o.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(i){t[this.expando]=n,J.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var i,r=this.key(e),s=this.cache[r];if("string"==typeof t)s[t]=n;else if(J.isEmptyObject(s))J.extend(this.cache[r],t);else for(i in t)s[i]=t[i];return s},get:function(e,t){var n=this.cache[this.key(e)];return void 0===t?n:n[t]},access:function(e,t,n){var i;return void 0===t||t&&"string"==typeof t&&void 0===n?(i=this.get(e,t),void 0!==i?i:this.get(e,J.camelCase(t))):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i,r,s=this.key(e),a=this.cache[s];if(void 0===t)this.cache[s]={};else{J.isArray(t)?i=t.concat(t.map(J.camelCase)):(r=J.camelCase(t),t in a?i=[t,r]:(i=r,i=i in a?[i]:i.match(he)||[])),n=i.length;for(;n--;)delete a[i[n]]}},hasData:function(e){return!J.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}};var ve=new o,ye=new o,we=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,xe=/([A-Z])/g;J.extend({hasData:function(e){return ye.hasData(e)||ve.hasData(e)},data:function(e,t,n){return ye.access(e,t,n)},removeData:function(e,t){ye.remove(e,t)},_data:function(e,t,n){return ve.access(e,t,n)},_removeData:function(e,t){ve.remove(e,t)}}),J.fn.extend({data:function(e,t){var n,i,r,s=this[0],a=s&&s.attributes;if(void 0===e){if(this.length&&(r=ye.get(s),1===s.nodeType&&!ve.get(s,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=J.camelCase(i.slice(5)),l(s,i,r[i])));ve.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){ye.set(this,e)}):ge(this,function(t){var n,i=J.camelCase(e);if(s&&void 0===t){if(n=ye.get(s,e),void 0!==n)return n;if(n=ye.get(s,i),void 0!==n)return n;if(n=l(s,i,void 0),void 0!==n)return n}else this.each(function(){var n=ye.get(this,i);ye.set(this,i,t),-1!==e.indexOf("-")&&void 0!==n&&ye.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ye.remove(this,e)})}}),J.extend({queue:function(e,t,n){var i;return e?(t=(t||"fx")+"queue",i=ve.get(e,t),n&&(!i||J.isArray(n)?i=ve.access(e,t,J.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=J.queue(e,t),i=n.length,r=n.shift(),s=J._queueHooks(e,t),a=function(){J.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,a,s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ve.get(e,n)||ve.access(e,n,{empty:J.Callbacks("once memory").add(function(){ve.remove(e,[t+"queue",n])})})}}),J.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?J.queue(this[0],e):void 0===t?this:this.each(function(){var n=J.queue(this,e,t);J._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&J.dequeue(this,e)})},dequeue:function(e){return this.each(function(){J.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=J.Deferred(),s=this,a=this.length,o=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=ve.get(s[a],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(o));return o(),r.promise(t)}});var be=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ce=["Top","Right","Bottom","Left"],Te=function(e,t){return e=t||e,"none"===J.css(e,"display")||!J.contains(e.ownerDocument,e)},Se=/^(?:checkbox|radio)$/i;!function(){var e=Z.createDocumentFragment(),t=e.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),K.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",K.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var ke="undefined";K.focusinBubbles="onfocusin"in e;var _e=/^key/,Ee=/^(?:mouse|pointer|contextmenu)|click/,Me=/^(?:focusinfocus|focusoutblur)$/,Pe=/^([^.]*)(?:\.(.+)|)$/;J.event={global:{},add:function(e,t,n,i,r){var s,a,o,l,p,c,u,d,h,f,m,g=ve.get(e);if(g)for(n.handler&&(s=n,n=s.handler,r=s.selector),n.guid||(n.guid=J.guid++),(l=g.events)||(l=g.events={}),(a=g.handle)||(a=g.handle=function(t){return typeof J!==ke&&J.event.triggered!==t.type?J.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(he)||[""],p=t.length;p--;)o=Pe.exec(t[p])||[],h=m=o[1],f=(o[2]||"").split(".").sort(),h&&(u=J.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=J.event.special[h]||{},c=J.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&J.expr.match.needsContext.test(r),namespace:f.join(".")},s),(d=l[h])||(d=l[h]=[],d.delegateCount=0,u.setup&&u.setup.call(e,i,f,a)!==!1||e.addEventListener&&e.addEventListener(h,a,!1)),u.add&&(u.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),J.event.global[h]=!0)},remove:function(e,t,n,i,r){var s,a,o,l,p,c,u,d,h,f,m,g=ve.hasData(e)&&ve.get(e);if(g&&(l=g.events)){for(t=(t||"").match(he)||[""],p=t.length;p--;)if(o=Pe.exec(t[p])||[],h=m=o[1],f=(o[2]||"").split(".").sort(),h){for(u=J.event.special[h]||{},h=(i?u.delegateType:u.bindType)||h,d=l[h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=s=d.length;s--;)c=d[s],!r&&m!==c.origType||n&&n.guid!==c.guid||o&&!o.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(s,1),c.selector&&d.delegateCount--,u.remove&&u.remove.call(e,c));a&&!d.length&&(u.teardown&&u.teardown.call(e,f,g.handle)!==!1||J.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)J.event.remove(e,h+t[p],n,i,!0);J.isEmptyObject(l)&&(delete g.handle,ve.remove(e,"events"))}},trigger:function(t,n,i,r){var s,a,o,l,p,c,u,d=[i||Z],h=Y.call(t,"type")?t.type:t,f=Y.call(t,"namespace")?t.namespace.split("."):[];if(a=o=i=i||Z,3!==i.nodeType&&8!==i.nodeType&&!Me.test(h+J.event.triggered)&&(h.indexOf(".")>=0&&(f=h.split("."),h=f.shift(),f.sort()),p=h.indexOf(":")<0&&"on"+h,t=t[J.expando]?t:new J.Event(h,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=f.join("."),t.namespace_re=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:J.makeArray(n,[t]),u=J.event.special[h]||{},r||!u.trigger||u.trigger.apply(i,n)!==!1)){if(!r&&!u.noBubble&&!J.isWindow(i)){for(l=u.delegateType||h,Me.test(l+h)||(a=a.parentNode);a;a=a.parentNode)d.push(a),o=a;o===(i.ownerDocument||Z)&&d.push(o.defaultView||o.parentWindow||e)}for(s=0;(a=d[s++])&&!t.isPropagationStopped();)t.type=s>1?l:u.bindType||h,c=(ve.get(a,"events")||{})[t.type]&&ve.get(a,"handle"),c&&c.apply(a,n),c=p&&a[p],c&&c.apply&&J.acceptData(a)&&(t.result=c.apply(a,n),t.result===!1&&t.preventDefault());return t.type=h,r||t.isDefaultPrevented()||u._default&&u._default.apply(d.pop(),n)!==!1||!J.acceptData(i)||p&&J.isFunction(i[h])&&!J.isWindow(i)&&(o=i[p],o&&(i[p]=null),J.event.triggered=h,i[h](),J.event.triggered=void 0,o&&(i[p]=o)),t.result}},dispatch:function(e){e=J.event.fix(e);var t,n,i,r,s,a=[],o=W.call(arguments),l=(ve.get(this,"events")||{})[e.type]||[],p=J.event.special[e.type]||{};if(o[0]=e,e.delegateTarget=this,!p.preDispatch||p.preDispatch.call(this,e)!==!1){for(a=J.event.handlers.call(this,e,l),t=0;(r=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!e.isImmediatePropagationStopped();)(!e.namespace_re||e.namespace_re.test(s.namespace))&&(e.handleObj=s,e.data=s.data,i=((J.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,o),void 0!==i&&(e.result=i)===!1&&(e.preventDefault(),e.stopPropagation()));return p.postDispatch&&p.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,s,a=[],o=t.delegateCount,l=e.target;if(o&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==e.type){for(i=[],n=0;o>n;n++)s=t[n],r=s.selector+" ",void 0===i[r]&&(i[r]=s.needsContext?J(r,this).index(l)>=0:J.find(r,this,null,[l]).length),i[r]&&i.push(s);i.length&&a.push({elem:l,handlers:i})}return o<t.length&&a.push({elem:this,handlers:t.slice(o)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||Z,i=n.documentElement,r=n.body,e.pageX=t.clientX+(i&&i.scrollLeft||r&&r.scrollLeft||0)-(i&&i.clientLeft||r&&r.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||r&&r.scrollTop||0)-(i&&i.clientTop||r&&r.clientTop||0)),e.which||void 0===s||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[J.expando])return e;var t,n,i,r=e.type,s=e,a=this.fixHooks[r];for(a||(this.fixHooks[r]=a=Ee.test(r)?this.mouseHooks:_e.test(r)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,e=new J.Event(s),t=i.length;t--;)n=i[t],e[n]=s[n];return e.target||(e.target=Z),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==u()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===u()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&J.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(e){return J.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,i){var r=J.extend(new J.Event,n,{type:e,isSimulated:!0,originalEvent:{}});i?J.event.trigger(r,null,t):J.event.dispatch.call(t,r),r.isDefaultPrevented()&&n.preventDefault()}},J.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},J.Event=function(e,t){return this instanceof J.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?p:c):this.type=e,t&&J.extend(this,t),this.timeStamp=e&&e.timeStamp||J.now(),void(this[J.expando]=!0)):new J.Event(e,t)},J.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=p,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=p,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=p,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},J.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){J.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,s=e.handleObj;return(!r||r!==i&&!J.contains(i,r))&&(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}}),K.focusinBubbles||J.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){J.event.simulate(t,e.target,J.event.fix(e),!0)};J.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=ve.access(i,t);r||i.addEventListener(e,n,!0),ve.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=ve.access(i,t)-1;r?ve.access(i,t,r):(i.removeEventListener(e,n,!0),ve.remove(i,t))}}}),J.fn.extend({on:function(e,t,n,i,r){var s,a;if("object"==typeof e){"string"!=typeof t&&(n=n||t,t=void 0);for(a in e)this.on(a,t,n,e[a],r);return this}if(null==n&&null==i?(i=t,n=t=void 0):null==i&&("string"==typeof t?(i=n,n=void 0):(i=n,n=t,t=void 0)),i===!1)i=c;else if(!i)return this;return 1===r&&(s=i,i=function(e){return J().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=J.guid++)),this.each(function(){J.event.add(this,e,i,n,t)})},one:function(e,t,n,i){return this.on(e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,J(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return(t===!1||"function"==typeof t)&&(n=t,t=void 0),n===!1&&(n=c),this.each(function(){J.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){J.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?J.event.trigger(e,t,n,!0):void 0}});var Le=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,De=/<([\w:]+)/,Ie=/<|&#?\w+;/,Ne=/<(?:script|style|link)/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^$|\/(?:java|ecma)script/i,Oe=/^true\/(.*)/,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Re={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Re.optgroup=Re.option,Re.tbody=Re.tfoot=Re.colgroup=Re.caption=Re.thead,Re.th=Re.td,J.extend({clone:function(e,t,n){var i,r,s,a,o=e.cloneNode(!0),l=J.contains(e.ownerDocument,e);if(!(K.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||J.isXMLDoc(e)))for(a=v(o),s=v(e),i=0,r=s.length;r>i;i++)y(s[i],a[i]);if(t)if(n)for(s=s||v(e),a=a||v(o),i=0,r=s.length;r>i;i++)g(s[i],a[i]);else g(e,o);return a=v(o,"script"),a.length>0&&m(a,!l&&v(e,"script")),o},buildFragment:function(e,t,n,i){for(var r,s,a,o,l,p,c=t.createDocumentFragment(),u=[],d=0,h=e.length;h>d;d++)if(r=e[d],r||0===r)if("object"===J.type(r))J.merge(u,r.nodeType?[r]:r);else if(Ie.test(r)){for(s=s||c.appendChild(t.createElement("div")),a=(De.exec(r)||["",""])[1].toLowerCase(),o=Re[a]||Re._default,s.innerHTML=o[1]+r.replace(Le,"<$1></$2>")+o[2],p=o[0];p--;)s=s.lastChild;J.merge(u,s.childNodes),s=c.firstChild,s.textContent=""}else u.push(t.createTextNode(r));for(c.textContent="",d=0;r=u[d++];)if((!i||-1===J.inArray(r,i))&&(l=J.contains(r.ownerDocument,r),s=v(c.appendChild(r),"script"),l&&m(s),n))for(p=0;r=s[p++];)ze.test(r.type||"")&&n.push(r);return c},cleanData:function(e){for(var t,n,i,r,s=J.event.special,a=0;void 0!==(n=e[a]);a++){if(J.acceptData(n)&&(r=n[ve.expando],r&&(t=ve.cache[r]))){if(t.events)for(i in t.events)s[i]?J.event.remove(n,i):J.removeEvent(n,i,t.handle);ve.cache[r]&&delete ve.cache[r]}delete ye.cache[n[ye.expando]]}}}),J.fn.extend({text:function(e){return ge(this,function(e){return void 0===e?J.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=e)})},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=d(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=d(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,i=e?J.filter(e,this):this,r=0;null!=(n=i[r]);r++)t||1!==n.nodeType||J.cleanData(v(n)),n.parentNode&&(t&&J.contains(n.ownerDocument,n)&&m(v(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(J.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return J.clone(this,e,t)})},html:function(e){return ge(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!Re[(De.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Le,"<$1></$2>");try{for(;i>n;n++)t=this[n]||{},1===t.nodeType&&(J.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(r){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,J.cleanData(v(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=F.apply([],e);var n,i,r,s,a,o,l=0,p=this.length,c=this,u=p-1,d=e[0],m=J.isFunction(d);if(m||p>1&&"string"==typeof d&&!K.checkClone&&Ae.test(d))return this.each(function(n){var i=c.eq(n);m&&(e[0]=d.call(this,n,i.html())),i.domManip(e,t)});if(p&&(n=J.buildFragment(e,this[0].ownerDocument,!1,this),i=n.firstChild,1===n.childNodes.length&&(n=i),i)){for(r=J.map(v(n,"script"),h),s=r.length;p>l;l++)a=n,l!==u&&(a=J.clone(a,!0,!0),s&&J.merge(r,v(a,"script"))),t.call(this[l],a,l);if(s)for(o=r[r.length-1].ownerDocument,J.map(r,f),l=0;s>l;l++)a=r[l],ze.test(a.type||"")&&!ve.access(a,"globalEval")&&J.contains(o,a)&&(a.src?J._evalUrl&&J._evalUrl(a.src):J.globalEval(a.textContent.replace(je,"")))}return this}}),J.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){J.fn[e]=function(e){for(var n,i=[],r=J(e),s=r.length-1,a=0;s>=a;a++)n=a===s?this:this.clone(!0),J(r[a])[t](n),G.apply(i,n.get());return this.pushStack(i)}});var Be,$e={},He=/^margin/,qe=new RegExp("^("+be+")(?!px)[a-z%]+$","i"),We=function(t){return t.ownerDocument.defaultView.opener?t.ownerDocument.defaultView.getComputedStyle(t,null):e.getComputedStyle(t,null)};!function(){function t(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",a.innerHTML="",r.appendChild(s);var t=e.getComputedStyle(a,null);n="1%"!==t.top,i="4px"===t.width,r.removeChild(s)}var n,i,r=Z.documentElement,s=Z.createElement("div"),a=Z.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",K.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",s.appendChild(a),e.getComputedStyle&&J.extend(K,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return null==i&&t(),i},reliableMarginRight:function(){var t,n=a.appendChild(Z.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",r.appendChild(s),t=!parseFloat(e.getComputedStyle(n,null).marginRight),r.removeChild(s),a.removeChild(n),t}}))}(),J.swap=function(e,t,n,i){var r,s,a={};for(s in t)a[s]=e.style[s],e.style[s]=t[s];r=n.apply(e,i||[]);for(s in t)e.style[s]=a[s];return r};var Fe=/^(none|table(?!-c[ea]).+)/,Ge=new RegExp("^("+be+")(.*)$","i"),Ve=new RegExp("^([+-])=("+be+")","i"),Xe={position:"absolute",visibility:"hidden",display:"block"},Ue={letterSpacing:"0",fontWeight:"400"},Ye=["Webkit","O","Moz","ms"];J.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=b(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,a,o=J.camelCase(t),l=e.style;return t=J.cssProps[o]||(J.cssProps[o]=T(l,o)),a=J.cssHooks[t]||J.cssHooks[o],void 0===n?a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:l[t]:(s=typeof n,"string"===s&&(r=Ve.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(J.css(e,t)),s="number"),null!=n&&n===n&&("number"!==s||J.cssNumber[o]||(n+="px"),K.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l[t]=n)),void 0)}},css:function(e,t,n,i){var r,s,a,o=J.camelCase(t);return t=J.cssProps[o]||(J.cssProps[o]=T(e.style,o)),a=J.cssHooks[t]||J.cssHooks[o],a&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=b(e,t,i)),
"normal"===r&&t in Ue&&(r=Ue[t]),""===n||n?(s=parseFloat(r),n===!0||J.isNumeric(s)?s||0:r):r}}),J.each(["height","width"],function(e,t){J.cssHooks[t]={get:function(e,n,i){return n?Fe.test(J.css(e,"display"))&&0===e.offsetWidth?J.swap(e,Xe,function(){return _(e,t,i)}):_(e,t,i):void 0},set:function(e,n,i){var r=i&&We(e);return S(e,n,i?k(e,t,i,"border-box"===J.css(e,"boxSizing",!1,r),r):0)}}}),J.cssHooks.marginRight=C(K.reliableMarginRight,function(e,t){return t?J.swap(e,{display:"inline-block"},b,[e,"marginRight"]):void 0}),J.each({margin:"",padding:"",border:"Width"},function(e,t){J.cssHooks[e+t]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];4>i;i++)r[e+Ce[i]+t]=s[i]||s[i-2]||s[0];return r}},He.test(e)||(J.cssHooks[e+t].set=S)}),J.fn.extend({css:function(e,t){return ge(this,function(e,t,n){var i,r,s={},a=0;if(J.isArray(t)){for(i=We(e),r=t.length;r>a;a++)s[t[a]]=J.css(e,t[a],!1,i);return s}return void 0!==n?J.style(e,t,n):J.css(e,t)},e,t,arguments.length>1)},show:function(){return E(this,!0)},hide:function(){return E(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Te(this)?J(this).show():J(this).hide()})}}),J.Tween=M,M.prototype={constructor:M,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||"swing",this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(J.cssNumber[n]?"":"px")},cur:function(){var e=M.propHooks[this.prop];return e&&e.get?e.get(this):M.propHooks._default.get(this)},run:function(e){var t,n=M.propHooks[this.prop];return this.pos=t=this.options.duration?J.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):M.propHooks._default.set(this),this}},M.prototype.init.prototype=M.prototype,M.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=J.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){J.fx.step[e.prop]?J.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[J.cssProps[e.prop]]||J.cssHooks[e.prop])?J.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},M.propHooks.scrollTop=M.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},J.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},J.fx=M.prototype.init,J.fx.step={};var Ke,Ze,Qe=/^(?:toggle|show|hide)$/,Je=new RegExp("^(?:([+-])=|)("+be+")([a-z%]*)$","i"),et=/queueHooks$/,tt=[I],nt={"*":[function(e,t){var n=this.createTween(e,t),i=n.cur(),r=Je.exec(t),s=r&&r[3]||(J.cssNumber[e]?"":"px"),a=(J.cssNumber[e]||"px"!==s&&+i)&&Je.exec(J.css(n.elem,e)),o=1,l=20;if(a&&a[3]!==s){s=s||a[3],r=r||[],a=+i||1;do o=o||".5",a/=o,J.style(n.elem,e,a+s);while(o!==(o=n.cur()/i)&&1!==o&&--l)}return r&&(a=n.start=+a||+i||0,n.unit=s,n.end=r[1]?a+(r[1]+1)*r[2]:+r[2]),n}]};J.Animation=J.extend(A,{tweener:function(e,t){J.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,i=0,r=e.length;r>i;i++)n=e[i],nt[n]=nt[n]||[],nt[n].unshift(t)},prefilter:function(e,t){t?tt.unshift(e):tt.push(e)}}),J.speed=function(e,t,n){var i=e&&"object"==typeof e?J.extend({},e):{complete:n||!n&&t||J.isFunction(e)&&e,duration:e,easing:n&&t||t&&!J.isFunction(t)&&t};return i.duration=J.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in J.fx.speeds?J.fx.speeds[i.duration]:J.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){J.isFunction(i.old)&&i.old.call(this),i.queue&&J.dequeue(this,i.queue)},i},J.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Te).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=J.isEmptyObject(e),s=J.speed(t,n,i),a=function(){var t=A(this,J.extend({},e),s);(r||ve.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||s.queue===!1?this.each(a):this.queue(s.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",s=J.timers,a=ve.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&et.test(r)&&i(a[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));(t||!n)&&J.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ve.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],s=J.timers,a=i?i.length:0;for(n.finish=!0,J.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;a>t;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),J.each(["toggle","show","hide"],function(e,t){var n=J.fn[t];J.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(L(t,!0),e,i,r)}}),J.each({slideDown:L("show"),slideUp:L("hide"),slideToggle:L("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){J.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),J.timers=[],J.fx.tick=function(){var e,t=0,n=J.timers;for(Ke=J.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||J.fx.stop(),Ke=void 0},J.fx.timer=function(e){J.timers.push(e),e()?J.fx.start():J.timers.pop()},J.fx.interval=13,J.fx.start=function(){Ze||(Ze=setInterval(J.fx.tick,J.fx.interval))},J.fx.stop=function(){clearInterval(Ze),Ze=null},J.fx.speeds={slow:600,fast:200,_default:400},J.fn.delay=function(e,t){return e=J.fx?J.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var i=setTimeout(t,e);n.stop=function(){clearTimeout(i)}})},function(){var e=Z.createElement("input"),t=Z.createElement("select"),n=t.appendChild(Z.createElement("option"));e.type="checkbox",K.checkOn=""!==e.value,K.optSelected=n.selected,t.disabled=!0,K.optDisabled=!n.disabled,e=Z.createElement("input"),e.value="t",e.type="radio",K.radioValue="t"===e.value}();var it,rt,st=J.expr.attrHandle;J.fn.extend({attr:function(e,t){return ge(this,J.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){J.removeAttr(this,e)})}}),J.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===ke?J.prop(e,t,n):(1===s&&J.isXMLDoc(e)||(t=t.toLowerCase(),i=J.attrHooks[t]||(J.expr.match.bool.test(t)?rt:it)),void 0===n?i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=J.find.attr(e,t),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):void J.removeAttr(e,t))},removeAttr:function(e,t){var n,i,r=0,s=t&&t.match(he);if(s&&1===e.nodeType)for(;n=s[r++];)i=J.propFix[n]||n,J.expr.match.bool.test(n)&&(e[i]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!K.radioValue&&"radio"===t&&J.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),rt={set:function(e,t,n){return t===!1?J.removeAttr(e,n):e.setAttribute(n,n),n}},J.each(J.expr.match.bool.source.match(/\w+/g),function(e,t){var n=st[t]||J.find.attr;st[t]=function(e,t,i){var r,s;return i||(s=st[t],st[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,st[t]=s),r}});var at=/^(?:input|select|textarea|button)$/i;J.fn.extend({prop:function(e,t){return ge(this,J.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[J.propFix[e]||e]})}}),J.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var i,r,s,a=e.nodeType;if(e&&3!==a&&8!==a&&2!==a)return s=1!==a||!J.isXMLDoc(e),s&&(t=J.propFix[t]||t,r=J.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute("tabindex")||at.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),K.optSelected||(J.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),J.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){J.propFix[this.toLowerCase()]=this});var ot=/[\t\r\n\f]/g;J.fn.extend({addClass:function(e){var t,n,i,r,s,a,o="string"==typeof e&&e,l=0,p=this.length;if(J.isFunction(e))return this.each(function(t){J(this).addClass(e.call(this,t,this.className))});if(o)for(t=(e||"").match(he)||[];p>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ot," "):" ")){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=J.trim(i),n.className!==a&&(n.className=a)}return this},removeClass:function(e){var t,n,i,r,s,a,o=0===arguments.length||"string"==typeof e&&e,l=0,p=this.length;if(J.isFunction(e))return this.each(function(t){J(this).removeClass(e.call(this,t,this.className))});if(o)for(t=(e||"").match(he)||[];p>l;l++)if(n=this[l],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ot," "):"")){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");a=e?J.trim(i):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):this.each(J.isFunction(e)?function(n){J(this).toggleClass(e.call(this,n,this.className,t),t)}:function(){if("string"===n)for(var t,i=0,r=J(this),s=e.match(he)||[];t=s[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else(n===ke||"boolean"===n)&&(this.className&&ve.set(this,"__className__",this.className),this.className=this.className||e===!1?"":ve.get(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(ot," ").indexOf(t)>=0)return!0;return!1}});var lt=/\r/g;J.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=J.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,J(this).val()):e,null==r?r="":"number"==typeof r?r+="":J.isArray(r)&&(r=J.map(r,function(e){return null==e?"":e+""})),t=J.valHooks[this.type]||J.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return t=J.valHooks[r.type]||J.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(lt,""):null==n?"":n)}}}),J.extend({valHooks:{option:{get:function(e){var t=J.find.attr(e,"value");return null!=t?t:J.trim(J.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,s="select-one"===e.type||0>r,a=s?null:[],o=s?r+1:i.length,l=0>r?o:s?r:0;o>l;l++)if(n=i[l],!(!n.selected&&l!==r||(K.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&J.nodeName(n.parentNode,"optgroup"))){if(t=J(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,s=J.makeArray(t),a=r.length;a--;)i=r[a],(i.selected=J.inArray(i.value,s)>=0)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),J.each(["radio","checkbox"],function(){J.valHooks[this]={set:function(e,t){return J.isArray(t)?e.checked=J.inArray(J(e).val(),t)>=0:void 0}},K.checkOn||(J.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),J.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){J.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),J.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var pt=J.now(),ct=/\?/;J.parseJSON=function(e){return JSON.parse(e+"")},J.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,"text/xml")}catch(i){t=void 0}return(!t||t.getElementsByTagName("parsererror").length)&&J.error("Invalid XML: "+e),t};var ut=/#.*$/,dt=/([?&])_=[^&]*/,ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,ft=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,mt=/^(?:GET|HEAD)$/,gt=/^\/\//,vt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,yt={},wt={},xt="*/".concat("*"),bt=e.location.href,Ct=vt.exec(bt.toLowerCase())||[];J.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bt,type:"GET",isLocal:ft.test(Ct[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":xt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":J.parseJSON,"text xml":J.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?j(j(e,J.ajaxSettings),t):j(J.ajaxSettings,e)},ajaxPrefilter:z(yt),ajaxTransport:z(wt),ajax:function(e,t){function n(e,t,n,a){var l,c,v,y,x,C=t;2!==w&&(w=2,o&&clearTimeout(o),i=void 0,s=a||"",b.readyState=e>0?4:0,l=e>=200&&300>e||304===e,n&&(y=R(u,b,n)),y=B(u,y,b,l),l?(u.ifModified&&(x=b.getResponseHeader("Last-Modified"),x&&(J.lastModified[r]=x),x=b.getResponseHeader("etag"),x&&(J.etag[r]=x)),204===e||"HEAD"===u.type?C="nocontent":304===e?C="notmodified":(C=y.state,c=y.data,v=y.error,l=!v)):(v=C,(e||!C)&&(C="error",0>e&&(e=0))),b.status=e,b.statusText=(t||C)+"",l?f.resolveWith(d,[c,C,b]):f.rejectWith(d,[b,C,v]),b.statusCode(g),g=void 0,p&&h.trigger(l?"ajaxSuccess":"ajaxError",[b,u,l?c:v]),m.fireWith(d,[b,C]),p&&(h.trigger("ajaxComplete",[b,u]),--J.active||J.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,s,a,o,l,p,c,u=J.ajaxSetup({},t),d=u.context||u,h=u.context&&(d.nodeType||d.jquery)?J(d):J.event,f=J.Deferred(),m=J.Callbacks("once memory"),g=u.statusCode||{},v={},y={},w=0,x="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(2===w){if(!a)for(a={};t=ht.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===w?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return w||(e=y[n]=y[n]||e,v[e]=t),this},overrideMimeType:function(e){return w||(u.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>w)for(t in e)g[t]=[g[t],e[t]];else b.always(e[b.status]);return this},abort:function(e){var t=e||x;return i&&i.abort(t),n(0,t),this}};if(f.promise(b).complete=m.add,b.success=b.done,b.error=b.fail,u.url=((e||u.url||bt)+"").replace(ut,"").replace(gt,Ct[1]+"//"),u.type=t.method||t.type||u.method||u.type,u.dataTypes=J.trim(u.dataType||"*").toLowerCase().match(he)||[""],null==u.crossDomain&&(l=vt.exec(u.url.toLowerCase()),u.crossDomain=!(!l||l[1]===Ct[1]&&l[2]===Ct[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(Ct[3]||("http:"===Ct[1]?"80":"443")))),u.data&&u.processData&&"string"!=typeof u.data&&(u.data=J.param(u.data,u.traditional)),O(yt,u,t,b),2===w)return b;p=J.event&&u.global,p&&0===J.active++&&J.event.trigger("ajaxStart"),u.type=u.type.toUpperCase(),u.hasContent=!mt.test(u.type),r=u.url,u.hasContent||(u.data&&(r=u.url+=(ct.test(r)?"&":"?")+u.data,delete u.data),u.cache===!1&&(u.url=dt.test(r)?r.replace(dt,"$1_="+pt++):r+(ct.test(r)?"&":"?")+"_="+pt++)),u.ifModified&&(J.lastModified[r]&&b.setRequestHeader("If-Modified-Since",J.lastModified[r]),J.etag[r]&&b.setRequestHeader("If-None-Match",J.etag[r])),(u.data&&u.hasContent&&u.contentType!==!1||t.contentType)&&b.setRequestHeader("Content-Type",u.contentType),b.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+("*"!==u.dataTypes[0]?", "+xt+"; q=0.01":""):u.accepts["*"]);for(c in u.headers)b.setRequestHeader(c,u.headers[c]);if(u.beforeSend&&(u.beforeSend.call(d,b,u)===!1||2===w))return b.abort();x="abort";for(c in{success:1,error:1,complete:1})b[c](u[c]);if(i=O(wt,u,t,b)){b.readyState=1,p&&h.trigger("ajaxSend",[b,u]),u.async&&u.timeout>0&&(o=setTimeout(function(){b.abort("timeout")},u.timeout));try{w=1,i.send(v,n)}catch(C){if(!(2>w))throw C;n(-1,C)}}else n(-1,"No Transport");return b},getJSON:function(e,t,n){return J.get(e,t,n,"json")},getScript:function(e,t){return J.get(e,void 0,t,"script")}}),J.each(["get","post"],function(e,t){J[t]=function(e,n,i,r){return J.isFunction(n)&&(r=r||i,i=n,n=void 0),J.ajax({url:e,type:t,dataType:r,data:n,success:i})}}),J._evalUrl=function(e){return J.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},J.fn.extend({wrapAll:function(e){var t;return J.isFunction(e)?this.each(function(t){J(this).wrapAll(e.call(this,t))}):(this[0]&&(t=J(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return this.each(J.isFunction(e)?function(t){J(this).wrapInner(e.call(this,t))}:function(){var t=J(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=J.isFunction(e);return this.each(function(n){J(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){J.nodeName(this,"body")||J(this).replaceWith(this.childNodes)}).end()}}),J.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0},J.expr.filters.visible=function(e){return!J.expr.filters.hidden(e)};var Tt=/%20/g,St=/\[\]$/,kt=/\r?\n/g,_t=/^(?:submit|button|image|reset|file)$/i,Et=/^(?:input|select|textarea|keygen)/i;J.param=function(e,t){var n,i=[],r=function(e,t){t=J.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=J.ajaxSettings&&J.ajaxSettings.traditional),J.isArray(e)||e.jquery&&!J.isPlainObject(e))J.each(e,function(){r(this.name,this.value)});else for(n in e)$(n,e[n],t,r);return i.join("&").replace(Tt,"+")},J.fn.extend({serialize:function(){return J.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=J.prop(this,"elements");return e?J.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!J(this).is(":disabled")&&Et.test(this.nodeName)&&!_t.test(e)&&(this.checked||!Se.test(e))}).map(function(e,t){var n=J(this).val();return null==n?null:J.isArray(n)?J.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}}),J.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var Mt=0,Pt={},Lt={0:200,1223:204},Dt=J.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in Pt)Pt[e]()}),K.cors=!!Dt&&"withCredentials"in Dt,K.ajax=Dt=!!Dt,J.ajaxTransport(function(e){var t;return K.cors||Dt&&!e.crossDomain?{send:function(n,i){var r,s=e.xhr(),a=++Mt;if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)s[r]=e.xhrFields[r];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)s.setRequestHeader(r,n[r]);t=function(e){return function(){t&&(delete Pt[a],t=s.onload=s.onerror=null,"abort"===e?s.abort():"error"===e?i(s.status,s.statusText):i(Lt[s.status]||s.status,s.statusText,"string"==typeof s.responseText?{text:s.responseText}:void 0,s.getAllResponseHeaders()))}},s.onload=t(),s.onerror=t("error"),t=Pt[a]=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(o){if(t)throw o}},abort:function(){t&&t()}}:void 0}),J.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return J.globalEval(e),e}}}),J.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),J.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=J("<script>").prop({async:!0,charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),Z.head.appendChild(t[0])},abort:function(){n&&n()}}}});var It=[],Nt=/(=)\?(?=&|$)|\?\?/;J.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=It.pop()||J.expando+"_"+pt++;return this[e]=!0,e}}),J.ajaxPrefilter("json jsonp",function(t,n,i){var r,s,a,o=t.jsonp!==!1&&(Nt.test(t.url)?"url":"string"==typeof t.data&&!(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Nt.test(t.data)&&"data");return o||"jsonp"===t.dataTypes[0]?(r=t.jsonpCallback=J.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Nt,"$1"+r):t.jsonp!==!1&&(t.url+=(ct.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||J.error(r+" was not called"),a[0]},t.dataTypes[0]="json",s=e[r],e[r]=function(){a=arguments},i.always(function(){e[r]=s,t[r]&&(t.jsonpCallback=n.jsonpCallback,It.push(r)),a&&J.isFunction(s)&&s(a[0]),a=s=void 0}),"script"):void 0}),J.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||Z;var i=ae.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=J.buildFragment([e],t,r),r&&r.length&&J(r).remove(),J.merge([],i.childNodes))};var At=J.fn.load;J.fn.load=function(e,t,n){if("string"!=typeof e&&At)return At.apply(this,arguments);var i,r,s,a=this,o=e.indexOf(" ");return o>=0&&(i=J.trim(e.slice(o)),e=e.slice(0,o)),J.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&J.ajax({url:e,type:r,dataType:"html",data:t}).done(function(e){s=arguments,a.html(i?J("<div>").append(J.parseHTML(e)).find(i):e)}).complete(n&&function(e,t){a.each(n,s||[e.responseText,t,e])}),this},J.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){J.fn[t]=function(e){return this.on(t,e)}}),J.expr.filters.animated=function(e){return J.grep(J.timers,function(t){return e===t.elem}).length};var zt=e.document.documentElement;J.offset={setOffset:function(e,t,n){var i,r,s,a,o,l,p,c=J.css(e,"position"),u=J(e),d={};"static"===c&&(e.style.position="relative"),o=u.offset(),s=J.css(e,"top"),l=J.css(e,"left"),p=("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1,p?(i=u.position(),a=i.top,r=i.left):(a=parseFloat(s)||0,r=parseFloat(l)||0),J.isFunction(t)&&(t=t.call(e,n,o)),null!=t.top&&(d.top=t.top-o.top+a),null!=t.left&&(d.left=t.left-o.left+r),"using"in t?t.using.call(e,d):u.css(d)}},J.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){J.offset.setOffset(this,e,t)});var t,n,i=this[0],r={top:0,left:0},s=i&&i.ownerDocument;if(s)return t=s.documentElement,J.contains(t,i)?(typeof i.getBoundingClientRect!==ke&&(r=i.getBoundingClientRect()),n=H(s),{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===J.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),J.nodeName(e[0],"html")||(i=e.offset()),i.top+=J.css(e[0],"borderTopWidth",!0),i.left+=J.css(e[0],"borderLeftWidth",!0)),{top:t.top-i.top-J.css(n,"marginTop",!0),left:t.left-i.left-J.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||zt;e&&!J.nodeName(e,"html")&&"static"===J.css(e,"position");)e=e.offsetParent;return e||zt})}}),J.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var i="pageYOffset"===n;J.fn[t]=function(r){return ge(this,function(t,r,s){var a=H(t);return void 0===s?a?a[n]:t[r]:void(a?a.scrollTo(i?e.pageXOffset:s,i?s:e.pageYOffset):t[r]=s)},t,r,arguments.length,null)}}),J.each(["top","left"],function(e,t){J.cssHooks[t]=C(K.pixelPosition,function(e,n){return n?(n=b(e,t),qe.test(n)?J(e).position()[t]+"px":n):void 0})}),J.each({Height:"height",Width:"width"},function(e,t){J.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){J.fn[i]=function(i,r){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(i===!0||r===!0?"margin":"border");return ge(this,function(t,n,i){var r;return J.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?J.css(t,n,a):J.style(t,n,i,a)},t,s?i:void 0,s,null)}})}),J.fn.size=function(){return this.length},J.fn.andSelf=J.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return J});var Ot=e.jQuery,jt=e.$;return J.noConflict=function(t){return e.$===J&&(e.$=jt),t&&e.jQuery===J&&(e.jQuery=Ot),J},typeof t===ke&&(e.jQuery=e.$=J),J}),function(){"use strict";function e(e){e.fn.swiper=function(n){var i;return e(this).each(function(){var e=new t(this,n);i||(i=e)}),i}}var t=function(e,i){function r(){return"horizontal"===g.params.direction}function s(){g.autoplayTimeoutId=setTimeout(function(){g.params.loop?(g.fixLoop(),g._slideNext()):g.isEnd?i.autoplayStopOnLast?g.stopAutoplay():g._slideTo(0):g._slideNext()},g.params.autoplay)}function a(e,t){var n=v(e.target);if(!n.is(t))if("string"==typeof t)n=n.parents(t);else if(t.nodeType){var i;return n.parents().each(function(e,n){n===t&&(i=t)}),i?t:void 0}return 0===n.length?void 0:n[0]}function o(e,t){t=t||{};var n=window.MutationObserver||window.WebkitMutationObserver,i=new n(function(e){e.forEach(function(e){g.onResize(!0),g.emit("onObserverUpdate",g,e)})});i.observe(e,{attributes:"undefined"==typeof t.attributes?!0:t.attributes,childList:"undefined"==typeof t.childList?!0:t.childList,characterData:"undefined"==typeof t.characterData?!0:t.characterData}),g.observers.push(i)}function l(e){e.originalEvent&&(e=e.originalEvent);var t=e.keyCode||e.charCode;if(!g.params.allowSwipeToNext&&(r()&&39===t||!r()&&40===t))return!1;if(!g.params.allowSwipeToPrev&&(r()&&37===t||!r()&&38===t))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||document.activeElement&&document.activeElement.nodeName&&("input"===document.activeElement.nodeName.toLowerCase()||"textarea"===document.activeElement.nodeName.toLowerCase()))){if(37===t||39===t||38===t||40===t){var n=!1;if(g.container.parents(".swiper-slide").length>0&&0===g.container.parents(".swiper-slide-active").length)return;for(var i={left:window.pageXOffset,top:window.pageYOffset},s=window.innerWidth,a=window.innerHeight,o=g.container.offset(),l=[[o.left,o.top],[o.left+g.width,o.top],[o.left,o.top+g.height],[o.left+g.width,o.top+g.height]],p=0;p<l.length;p++){var c=l[p];c[0]>=i.left&&c[0]<=i.left+s&&c[1]>=i.top&&c[1]<=i.top+a&&(n=!0)}if(!n)return}r()?((37===t||39===t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),39===t&&g.slideNext(),37===t&&g.slidePrev()):((38===t||40===t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),40===t&&g.slideNext(),38===t&&g.slidePrev())}}function p(e){e.originalEvent&&(e=e.originalEvent);var t=g._wheelEvent,n=0;if(e.detail)n=-e.detail;else if("mousewheel"===t)if(g.params.mousewheelForceToAxis)if(r()){if(!(Math.abs(e.wheelDeltaX)>Math.abs(e.wheelDeltaY)))return;n=e.wheelDeltaX}else{if(!(Math.abs(e.wheelDeltaY)>Math.abs(e.wheelDeltaX)))return;n=e.wheelDeltaY}else n=e.wheelDelta;else if("DOMMouseScroll"===t)n=-e.detail;else if("wheel"===t)if(g.params.mousewheelForceToAxis)if(r()){if(!(Math.abs(e.deltaX)>Math.abs(e.deltaY)))return;n=-e.deltaX}else{if(!(Math.abs(e.deltaY)>Math.abs(e.deltaX)))return;n=-e.deltaY}else n=Math.abs(e.deltaX)>Math.abs(e.deltaY)?-e.deltaX:-e.deltaY;if(g.params.freeMode){var i=g.getWrapperTranslate()+n;if(i>0&&(i=0),i<g.maxTranslate()&&(i=g.maxTranslate()),g.setWrapperTransition(0),g.setWrapperTranslate(i),g.updateProgress(),g.updateActiveIndex(),0===i||i===g.maxTranslate())return}else(new window.Date).getTime()-g._lastWheelScrollTime>60&&(0>n?g.slideNext():g.slidePrev()),g._lastWheelScrollTime=(new window.Date).getTime();return g.params.autoplay&&g.stopAutoplay(),e.preventDefault?e.preventDefault():e.returnValue=!1,!1}function c(e,t){e=v(e);var n,i,s;n=e.attr("data-swiper-parallax")||"0",i=e.attr("data-swiper-parallax-x"),s=e.attr("data-swiper-parallax-y"),i||s?(i=i||"0",s=s||"0"):r()?(i=n,s="0"):(s=n,i="0"),i=i.indexOf("%")>=0?parseInt(i,10)*t+"%":i*t+"px",s=s.indexOf("%")>=0?parseInt(s,10)*t+"%":s*t+"px",e.transform("translate3d("+i+", "+s+",0px)")}function u(e){return 0!==e.indexOf("on")&&(e=e[0]!==e[0].toUpperCase()?"on"+e[0].toUpperCase()+e.substring(1):"on"+e),e}if(!(this instanceof t))return new t(e,i);var d={direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,autoplay:!1,autoplayDisableOnInteraction:!0,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeSticky:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",coverflow:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0},cube:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94},fade:{crossFade:!1},parallax:!1,scrollbar:null,scrollbarHide:!0,keyboardControl:!1,mousewheelControl:!1,mousewheelForceToAxis:!1,hashnav:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,onlyExternal:!1,threshold:0,touchMoveStopPropagation:!0,pagination:null,paginationClickable:!1,paginationHide:!1,paginationBulletRender:null,resistance:!0,resistanceRatio:.85,nextButton:null,prevButton:null,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,lazyLoading:!1,lazyLoadingInPrevNext:!1,lazyLoadingOnTransitionStart:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,control:void 0,controlInverse:!1,allowSwipeToPrev:!0,allowSwipeToNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",buttonDisabledClass:"swiper-button-disabled",paginationHiddenClass:"swiper-pagination-hidden",observer:!1,observeParents:!1,a11y:!1,prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",runCallbacksOnInit:!0},h=i&&i.virtualTranslate;i=i||{};for(var f in d)if("undefined"==typeof i[f])i[f]=d[f];else if("object"==typeof i[f])for(var m in d[f])"undefined"==typeof i[f][m]&&(i[f][m]=d[f][m]);var g=this;g.version="3.0.7",g.params=i,g.classNames=[];var v;if(v="undefined"==typeof n?window.Dom7||window.Zepto||window.jQuery:n,v&&(g.$=v,g.container=v(e),0!==g.container.length)){if(g.container.length>1)return void g.container.each(function(){new t(this,i)});g.container[0].swiper=g,g.container.data("swiper",g),g.classNames.push("swiper-container-"+g.params.direction),g.params.freeMode&&g.classNames.push("swiper-container-free-mode"),g.support.flexbox||(g.classNames.push("swiper-container-no-flexbox"),g.params.slidesPerColumn=1),(g.params.parallax||g.params.watchSlidesVisibility)&&(g.params.watchSlidesProgress=!0),["cube","coverflow"].indexOf(g.params.effect)>=0&&(g.support.transforms3d?(g.params.watchSlidesProgress=!0,g.classNames.push("swiper-container-3d")):g.params.effect="slide"),"slide"!==g.params.effect&&g.classNames.push("swiper-container-"+g.params.effect),"cube"===g.params.effect&&(g.params.resistanceRatio=0,g.params.slidesPerView=1,g.params.slidesPerColumn=1,g.params.slidesPerGroup=1,g.params.centeredSlides=!1,g.params.spaceBetween=0,g.params.virtualTranslate=!0,
g.params.setWrapperSize=!1),"fade"===g.params.effect&&(g.params.slidesPerView=1,g.params.slidesPerColumn=1,g.params.slidesPerGroup=1,g.params.watchSlidesProgress=!0,g.params.spaceBetween=0,"undefined"==typeof h&&(g.params.virtualTranslate=!0)),g.params.grabCursor&&g.support.touch&&(g.params.grabCursor=!1),g.wrapper=g.container.children("."+g.params.wrapperClass),g.params.pagination&&(g.paginationContainer=v(g.params.pagination),g.params.paginationClickable&&g.paginationContainer.addClass("swiper-pagination-clickable")),g.rtl=r()&&("rtl"===g.container[0].dir.toLowerCase()||"rtl"===g.container.css("direction")),g.rtl&&g.classNames.push("swiper-container-rtl"),g.rtl&&(g.wrongRTL="-webkit-box"===g.wrapper.css("display")),g.params.slidesPerColumn>1&&g.classNames.push("swiper-container-multirow"),g.device.android&&g.classNames.push("swiper-container-android"),g.container.addClass(g.classNames.join(" ")),g.translate=0,g.progress=0,g.velocity=0,g.lockSwipeToNext=function(){g.params.allowSwipeToNext=!1},g.lockSwipeToPrev=function(){g.params.allowSwipeToPrev=!1},g.lockSwipes=function(){g.params.allowSwipeToNext=g.params.allowSwipeToPrev=!1},g.unlockSwipeToNext=function(){g.params.allowSwipeToNext=!0},g.unlockSwipeToPrev=function(){g.params.allowSwipeToPrev=!0},g.unlockSwipes=function(){g.params.allowSwipeToNext=g.params.allowSwipeToPrev=!0},g.params.grabCursor&&(g.container[0].style.cursor="move",g.container[0].style.cursor="-webkit-grab",g.container[0].style.cursor="-moz-grab",g.container[0].style.cursor="grab"),g.imagesToLoad=[],g.imagesLoaded=0,g.loadImage=function(e,t,n,i){function r(){i&&i()}var s;e.complete&&n?r():t?(s=new window.Image,s.onload=r,s.onerror=r,s.src=t):r()},g.preloadImages=function(){function e(){"undefined"!=typeof g&&null!==g&&(void 0!==g.imagesLoaded&&g.imagesLoaded++,g.imagesLoaded===g.imagesToLoad.length&&(g.params.updateOnImagesReady&&g.update(),g.emit("onImagesReady",g)))}g.imagesToLoad=g.container.find("img");for(var t=0;t<g.imagesToLoad.length;t++)g.loadImage(g.imagesToLoad[t],g.imagesToLoad[t].currentSrc||g.imagesToLoad[t].getAttribute("src"),!0,e)},g.autoplayTimeoutId=void 0,g.autoplaying=!1,g.autoplayPaused=!1,g.startAutoplay=function(){return"undefined"!=typeof g.autoplayTimeoutId?!1:g.params.autoplay?g.autoplaying?!1:(g.autoplaying=!0,g.emit("onAutoplayStart",g),void s()):!1},g.stopAutoplay=function(e){g.autoplayTimeoutId&&(g.autoplayTimeoutId&&clearTimeout(g.autoplayTimeoutId),g.autoplaying=!1,g.autoplayTimeoutId=void 0,g.emit("onAutoplayStop",g))},g.pauseAutoplay=function(e){g.autoplayPaused||(g.autoplayTimeoutId&&clearTimeout(g.autoplayTimeoutId),g.autoplayPaused=!0,0===e?(g.autoplayPaused=!1,s()):g.wrapper.transitionEnd(function(){g&&(g.autoplayPaused=!1,g.autoplaying?s():g.stopAutoplay())}))},g.minTranslate=function(){return-g.snapGrid[0]},g.maxTranslate=function(){return-g.snapGrid[g.snapGrid.length-1]},g.updateContainerSize=function(){var e,t;e="undefined"!=typeof g.params.width?g.params.width:g.container[0].clientWidth,t="undefined"!=typeof g.params.height?g.params.height:g.container[0].clientHeight,0===e&&r()||0===t&&!r()||(g.width=e,g.height=t,g.size=r()?g.width:g.height)},g.updateSlidesSize=function(){g.slides=g.wrapper.children("."+g.params.slideClass),g.snapGrid=[],g.slidesGrid=[],g.slidesSizesGrid=[];var e,t=g.params.spaceBetween,n=0,i=0,s=0;"string"==typeof t&&t.indexOf("%")>=0&&(t=parseFloat(t.replace("%",""))/100*g.size),g.virtualSize=-t,g.slides.css(g.rtl?{marginLeft:"",marginTop:""}:{marginRight:"",marginBottom:""});var a;g.params.slidesPerColumn>1&&(a=Math.floor(g.slides.length/g.params.slidesPerColumn)===g.slides.length/g.params.slidesPerColumn?g.slides.length:Math.ceil(g.slides.length/g.params.slidesPerColumn)*g.params.slidesPerColumn);var o;for(e=0;e<g.slides.length;e++){o=0;var l=g.slides.eq(e);if(g.params.slidesPerColumn>1){var p,c,u,d,h=g.params.slidesPerColumn;"column"===g.params.slidesPerColumnFill?(c=Math.floor(e/h),u=e-c*h,p=c+u*a/h,l.css({"-webkit-box-ordinal-group":p,"-moz-box-ordinal-group":p,"-ms-flex-order":p,"-webkit-order":p,order:p})):(d=a/h,u=Math.floor(e/d),c=e-u*d),l.css({"margin-top":0!==u&&g.params.spaceBetween&&g.params.spaceBetween+"px"}).attr("data-swiper-column",c).attr("data-swiper-row",u)}"none"!==l.css("display")&&("auto"===g.params.slidesPerView?o=r()?l.outerWidth(!0):l.outerHeight(!0):(o=(g.size-(g.params.slidesPerView-1)*t)/g.params.slidesPerView,r()?g.slides[e].style.width=o+"px":g.slides[e].style.height=o+"px"),g.slides[e].swiperSlideSize=o,g.slidesSizesGrid.push(o),g.params.centeredSlides?(n=n+o/2+i/2+t,0===e&&(n=n-g.size/2-t),Math.abs(n)<.001&&(n=0),s%g.params.slidesPerGroup===0&&g.snapGrid.push(n),g.slidesGrid.push(n)):(s%g.params.slidesPerGroup===0&&g.snapGrid.push(n),g.slidesGrid.push(n),n=n+o+t),g.virtualSize+=o+t,i=o,s++)}g.virtualSize=Math.max(g.virtualSize,g.size);var f;if(g.rtl&&g.wrongRTL&&("slide"===g.params.effect||"coverflow"===g.params.effect)&&g.wrapper.css({width:g.virtualSize+g.params.spaceBetween+"px"}),(!g.support.flexbox||g.params.setWrapperSize)&&g.wrapper.css(r()?{width:g.virtualSize+g.params.spaceBetween+"px"}:{height:g.virtualSize+g.params.spaceBetween+"px"}),g.params.slidesPerColumn>1&&(g.virtualSize=(o+g.params.spaceBetween)*a,g.virtualSize=Math.ceil(g.virtualSize/g.params.slidesPerColumn)-g.params.spaceBetween,g.wrapper.css({width:g.virtualSize+g.params.spaceBetween+"px"}),g.params.centeredSlides)){for(f=[],e=0;e<g.snapGrid.length;e++)g.snapGrid[e]<g.virtualSize+g.snapGrid[0]&&f.push(g.snapGrid[e]);g.snapGrid=f}if(!g.params.centeredSlides){for(f=[],e=0;e<g.snapGrid.length;e++)g.snapGrid[e]<=g.virtualSize-g.size&&f.push(g.snapGrid[e]);g.snapGrid=f,Math.floor(g.virtualSize-g.size)>Math.floor(g.snapGrid[g.snapGrid.length-1])&&g.snapGrid.push(g.virtualSize-g.size)}0===g.snapGrid.length&&(g.snapGrid=[0]),0!==g.params.spaceBetween&&g.slides.css(r()?g.rtl?{marginLeft:t+"px"}:{marginRight:t+"px"}:{marginBottom:t+"px"}),g.params.watchSlidesProgress&&g.updateSlidesOffset()},g.updateSlidesOffset=function(){for(var e=0;e<g.slides.length;e++)g.slides[e].swiperSlideOffset=r()?g.slides[e].offsetLeft:g.slides[e].offsetTop},g.updateSlidesProgress=function(e){if("undefined"==typeof e&&(e=g.translate||0),0!==g.slides.length){"undefined"==typeof g.slides[0].swiperSlideOffset&&g.updateSlidesOffset();var t=g.params.centeredSlides?-e+g.size/2:-e;g.rtl&&(t=g.params.centeredSlides?e-g.size/2:e);{g.container[0].getBoundingClientRect(),r()?"left":"top",r()?"right":"bottom"}g.slides.removeClass(g.params.slideVisibleClass);for(var n=0;n<g.slides.length;n++){var i=g.slides[n],s=g.params.centeredSlides===!0?i.swiperSlideSize/2:0,a=(t-i.swiperSlideOffset-s)/(i.swiperSlideSize+g.params.spaceBetween);if(g.params.watchSlidesVisibility){var o=-(t-i.swiperSlideOffset-s),l=o+g.slidesSizesGrid[n],p=o>=0&&o<g.size||l>0&&l<=g.size||0>=o&&l>=g.size;p&&g.slides.eq(n).addClass(g.params.slideVisibleClass)}i.progress=g.rtl?-a:a}}},g.updateProgress=function(e){"undefined"==typeof e&&(e=g.translate||0);var t=g.maxTranslate()-g.minTranslate();0===t?(g.progress=0,g.isBeginning=g.isEnd=!0):(g.progress=(e-g.minTranslate())/t,g.isBeginning=g.progress<=0,g.isEnd=g.progress>=1),g.isBeginning&&g.emit("onReachBeginning",g),g.isEnd&&g.emit("onReachEnd",g),g.params.watchSlidesProgress&&g.updateSlidesProgress(e),g.emit("onProgress",g,g.progress)},g.updateActiveIndex=function(){var e,t,n,i=g.rtl?g.translate:-g.translate;for(t=0;t<g.slidesGrid.length;t++)"undefined"!=typeof g.slidesGrid[t+1]?i>=g.slidesGrid[t]&&i<g.slidesGrid[t+1]-(g.slidesGrid[t+1]-g.slidesGrid[t])/2?e=t:i>=g.slidesGrid[t]&&i<g.slidesGrid[t+1]&&(e=t+1):i>=g.slidesGrid[t]&&(e=t);(0>e||"undefined"==typeof e)&&(e=0),n=Math.floor(e/g.params.slidesPerGroup),n>=g.snapGrid.length&&(n=g.snapGrid.length-1),e!==g.activeIndex&&(g.snapIndex=n,g.previousIndex=g.activeIndex,g.activeIndex=e,g.updateClasses())},g.updateClasses=function(){g.slides.removeClass(g.params.slideActiveClass+" "+g.params.slideNextClass+" "+g.params.slidePrevClass);var e=g.slides.eq(g.activeIndex);if(e.addClass(g.params.slideActiveClass),e.next("."+g.params.slideClass).addClass(g.params.slideNextClass),e.prev("."+g.params.slideClass).addClass(g.params.slidePrevClass),g.bullets&&g.bullets.length>0){g.bullets.removeClass(g.params.bulletActiveClass);var t;g.params.loop?(t=Math.ceil(g.activeIndex-g.loopedSlides)/g.params.slidesPerGroup,t>g.slides.length-1-2*g.loopedSlides&&(t-=g.slides.length-2*g.loopedSlides),t>g.bullets.length-1&&(t-=g.bullets.length)):t="undefined"!=typeof g.snapIndex?g.snapIndex:g.activeIndex||0,g.paginationContainer.length>1?g.bullets.each(function(){v(this).index()===t&&v(this).addClass(g.params.bulletActiveClass)}):g.bullets.eq(t).addClass(g.params.bulletActiveClass)}g.params.loop||(g.params.prevButton&&(g.isBeginning?(v(g.params.prevButton).addClass(g.params.buttonDisabledClass),g.params.a11y&&g.a11y&&g.a11y.disable(v(g.params.prevButton))):(v(g.params.prevButton).removeClass(g.params.buttonDisabledClass),g.params.a11y&&g.a11y&&g.a11y.enable(v(g.params.prevButton)))),g.params.nextButton&&(g.isEnd?(v(g.params.nextButton).addClass(g.params.buttonDisabledClass),g.params.a11y&&g.a11y&&g.a11y.disable(v(g.params.nextButton))):(v(g.params.nextButton).removeClass(g.params.buttonDisabledClass),g.params.a11y&&g.a11y&&g.a11y.enable(v(g.params.nextButton)))))},g.updatePagination=function(){if(g.params.pagination&&g.paginationContainer&&g.paginationContainer.length>0){for(var e="",t=g.params.loop?Math.ceil((g.slides.length-2*g.loopedSlides)/g.params.slidesPerGroup):g.snapGrid.length,n=0;t>n;n++)e+=g.params.paginationBulletRender?g.params.paginationBulletRender(n,g.params.bulletClass):'<span class="'+g.params.bulletClass+'"></span>';g.paginationContainer.html(e),g.bullets=g.paginationContainer.find("."+g.params.bulletClass)}},g.update=function(e){function t(){i=Math.min(Math.max(g.translate,g.maxTranslate()),g.minTranslate()),g.setWrapperTranslate(i),g.updateActiveIndex(),g.updateClasses()}if(g.updateContainerSize(),g.updateSlidesSize(),g.updateProgress(),g.updatePagination(),g.updateClasses(),g.params.scrollbar&&g.scrollbar&&g.scrollbar.set(),e){var n,i;g.params.freeMode?t():(n="auto"===g.params.slidesPerView&&g.isEnd&&!g.params.centeredSlides?g.slideTo(g.slides.length-1,0,!1,!0):g.slideTo(g.activeIndex,0,!1,!0),n||t())}},g.onResize=function(e){if(g.updateContainerSize(),g.updateSlidesSize(),g.updateProgress(),("auto"===g.params.slidesPerView||g.params.freeMode||e)&&g.updatePagination(),g.params.scrollbar&&g.scrollbar&&g.scrollbar.set(),g.params.freeMode){var t=Math.min(Math.max(g.translate,g.maxTranslate()),g.minTranslate());g.setWrapperTranslate(t),g.updateActiveIndex(),g.updateClasses()}else g.updateClasses(),"auto"===g.params.slidesPerView&&g.isEnd&&!g.params.centeredSlides?g.slideTo(g.slides.length-1,0,!1,!0):g.slideTo(g.activeIndex,0,!1,!0)};var y=["mousedown","mousemove","mouseup"];window.navigator.pointerEnabled?y=["pointerdown","pointermove","pointerup"]:window.navigator.msPointerEnabled&&(y=["MSPointerDown","MSPointerMove","MSPointerUp"]),g.touchEvents={start:g.support.touch||!g.params.simulateTouch?"touchstart":y[0],move:g.support.touch||!g.params.simulateTouch?"touchmove":y[1],end:g.support.touch||!g.params.simulateTouch?"touchend":y[2]},(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&("container"===g.params.touchEventsTarget?g.container:g.wrapper).addClass("swiper-wp8-"+g.params.direction),g.initEvents=function(e){var t=e?"off":"on",n=e?"removeEventListener":"addEventListener",r="container"===g.params.touchEventsTarget?g.container[0]:g.wrapper[0],s=g.support.touch?r:document,a=g.params.nested?!0:!1;g.browser.ie?(r[n](g.touchEvents.start,g.onTouchStart,!1),s[n](g.touchEvents.move,g.onTouchMove,a),s[n](g.touchEvents.end,g.onTouchEnd,!1)):(g.support.touch&&(r[n](g.touchEvents.start,g.onTouchStart,!1),r[n](g.touchEvents.move,g.onTouchMove,a),r[n](g.touchEvents.end,g.onTouchEnd,!1)),!i.simulateTouch||g.device.ios||g.device.android||(r[n]("mousedown",g.onTouchStart,!1),document[n]("mousemove",g.onTouchMove,a),document[n]("mouseup",g.onTouchEnd,!1))),window[n]("resize",g.onResize),g.params.nextButton&&(v(g.params.nextButton)[t]("click",g.onClickNext),g.params.a11y&&g.a11y&&v(g.params.nextButton)[t]("keydown",g.a11y.onEnterKey)),g.params.prevButton&&(v(g.params.prevButton)[t]("click",g.onClickPrev),g.params.a11y&&g.a11y&&v(g.params.prevButton)[t]("keydown",g.a11y.onEnterKey)),g.params.pagination&&g.params.paginationClickable&&v(g.paginationContainer)[t]("click","."+g.params.bulletClass,g.onClickIndex),(g.params.preventClicks||g.params.preventClicksPropagation)&&r[n]("click",g.preventClicks,!0)},g.attachEvents=function(e){g.initEvents()},g.detachEvents=function(){g.initEvents(!0)},g.allowClick=!0,g.preventClicks=function(e){g.allowClick||(g.params.preventClicks&&e.preventDefault(),g.params.preventClicksPropagation&&(e.stopPropagation(),e.stopImmediatePropagation()))},g.onClickNext=function(e){e.preventDefault(),g.slideNext()},g.onClickPrev=function(e){e.preventDefault(),g.slidePrev()},g.onClickIndex=function(e){e.preventDefault();var t=v(this).index()*g.params.slidesPerGroup;g.params.loop&&(t+=g.loopedSlides),g.slideTo(t)},g.updateClickedSlide=function(e){var t=a(e,"."+g.params.slideClass),n=!1;if(t)for(var i=0;i<g.slides.length;i++)g.slides[i]===t&&(n=!0);if(!t||!n)return g.clickedSlide=void 0,void(g.clickedIndex=void 0);if(g.clickedSlide=t,g.clickedIndex=v(t).index(),g.params.slideToClickedSlide&&void 0!==g.clickedIndex&&g.clickedIndex!==g.activeIndex){var r,s=g.clickedIndex;if(g.params.loop)if(r=v(g.clickedSlide).attr("data-swiper-slide-index"),s>g.slides.length-g.params.slidesPerView)g.fixLoop(),s=g.wrapper.children("."+g.params.slideClass+'[data-swiper-slide-index="'+r+'"]').eq(0).index(),setTimeout(function(){g.slideTo(s)},0);else if(s<g.params.slidesPerView-1){g.fixLoop();var o=g.wrapper.children("."+g.params.slideClass+'[data-swiper-slide-index="'+r+'"]');s=o.eq(o.length-1).index(),setTimeout(function(){g.slideTo(s)},0)}else g.slideTo(s);else g.slideTo(s)}};var w,x,b,C,T,S,k,_,E,M="input, select, textarea, button",P=Date.now(),L=[];g.animating=!1,g.touches={startX:0,startY:0,currentX:0,currentY:0,diff:0};var D,I;if(g.onTouchStart=function(e){if(e.originalEvent&&(e=e.originalEvent),D="touchstart"===e.type,D||!("which"in e)||3!==e.which){if(g.params.noSwiping&&a(e,"."+g.params.noSwipingClass))return void(g.allowClick=!0);if(!g.params.swipeHandler||a(e,g.params.swipeHandler)){if(w=!0,x=!1,C=void 0,I=void 0,g.touches.startX=g.touches.currentX="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,g.touches.startY=g.touches.currentY="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY,b=Date.now(),g.allowClick=!0,g.updateContainerSize(),g.swipeDirection=void 0,g.params.threshold>0&&(k=!1),"touchstart"!==e.type){var t=!0;v(e.target).is(M)&&(t=!1),document.activeElement&&v(document.activeElement).is(M)&&document.activeElement.blur(),t&&e.preventDefault()}g.emit("onTouchStart",g,e)}}},g.onTouchMove=function(e){if(e.originalEvent&&(e=e.originalEvent),!(D&&"mousemove"===e.type||e.preventedByNestedSwiper)){if(g.params.onlyExternal)return x=!0,void(g.allowClick=!1);if(D&&document.activeElement&&e.target===document.activeElement&&v(e.target).is(M))return x=!0,void(g.allowClick=!1);if(g.emit("onTouchMove",g,e),!(e.targetTouches&&e.targetTouches.length>1)){if(g.touches.currentX="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,g.touches.currentY="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,"undefined"==typeof C){var t=180*Math.atan2(Math.abs(g.touches.currentY-g.touches.startY),Math.abs(g.touches.currentX-g.touches.startX))/Math.PI;C=r()?t>g.params.touchAngle:90-t>g.params.touchAngle}if(C&&g.emit("onTouchMoveOpposite",g,e),"undefined"==typeof I&&g.browser.ieTouch&&(g.touches.currentX!==g.touches.startX||g.touches.currentY!==g.touches.startY)&&(I=!0),w){if(C)return void(w=!1);if(I||!g.browser.ieTouch){g.allowClick=!1,g.emit("onSliderMove",g,e),e.preventDefault(),g.params.touchMoveStopPropagation&&!g.params.nested&&e.stopPropagation(),x||(i.loop&&g.fixLoop(),S=g.getWrapperTranslate(),g.setWrapperTransition(0),g.animating&&g.wrapper.trigger("webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd"),g.params.autoplay&&g.autoplaying&&(g.params.autoplayDisableOnInteraction?g.stopAutoplay():g.pauseAutoplay()),E=!1,g.params.grabCursor&&(g.container[0].style.cursor="move",g.container[0].style.cursor="-webkit-grabbing",g.container[0].style.cursor="-moz-grabbin",g.container[0].style.cursor="grabbing")),x=!0;var n=g.touches.diff=r()?g.touches.currentX-g.touches.startX:g.touches.currentY-g.touches.startY;n*=g.params.touchRatio,g.rtl&&(n=-n),g.swipeDirection=n>0?"prev":"next",T=n+S;var s=!0;if(n>0&&T>g.minTranslate()?(s=!1,g.params.resistance&&(T=g.minTranslate()-1+Math.pow(-g.minTranslate()+S+n,g.params.resistanceRatio))):0>n&&T<g.maxTranslate()&&(s=!1,g.params.resistance&&(T=g.maxTranslate()+1-Math.pow(g.maxTranslate()-S-n,g.params.resistanceRatio))),s&&(e.preventedByNestedSwiper=!0),!g.params.allowSwipeToNext&&"next"===g.swipeDirection&&S>T&&(T=S),!g.params.allowSwipeToPrev&&"prev"===g.swipeDirection&&T>S&&(T=S),g.params.followFinger){if(g.params.threshold>0){if(!(Math.abs(n)>g.params.threshold||k))return void(T=S);if(!k)return k=!0,g.touches.startX=g.touches.currentX,g.touches.startY=g.touches.currentY,T=S,void(g.touches.diff=r()?g.touches.currentX-g.touches.startX:g.touches.currentY-g.touches.startY)}(g.params.freeMode||g.params.watchSlidesProgress)&&g.updateActiveIndex(),g.params.freeMode&&(0===L.length&&L.push({position:g.touches[r()?"startX":"startY"],time:b}),L.push({position:g.touches[r()?"currentX":"currentY"],time:(new window.Date).getTime()})),g.updateProgress(T),g.setWrapperTranslate(T)}}}}}},g.onTouchEnd=function(e){if(e.originalEvent&&(e=e.originalEvent),g.emit("onTouchEnd",g,e),w){g.params.grabCursor&&x&&w&&(g.container[0].style.cursor="move",g.container[0].style.cursor="-webkit-grab",g.container[0].style.cursor="-moz-grab",g.container[0].style.cursor="grab");var t=Date.now(),n=t-b;if(g.allowClick&&(g.updateClickedSlide(e),g.emit("onTap",g,e),300>n&&t-P>300&&(_&&clearTimeout(_),_=setTimeout(function(){g&&(g.params.paginationHide&&g.paginationContainer.length>0&&!v(e.target).hasClass(g.params.bulletClass)&&g.paginationContainer.toggleClass(g.params.paginationHiddenClass),g.emit("onClick",g,e))},300)),300>n&&300>t-P&&(_&&clearTimeout(_),g.emit("onDoubleTap",g,e))),P=Date.now(),setTimeout(function(){g&&g.allowClick&&(g.allowClick=!0)},0),!w||!x||!g.swipeDirection||0===g.touches.diff||T===S)return void(w=x=!1);w=x=!1;var i;if(i=g.params.followFinger?g.rtl?g.translate:-g.translate:-T,g.params.freeMode){if(i<-g.minTranslate())return void g.slideTo(g.activeIndex);if(i>-g.maxTranslate())return void g.slideTo(g.slides.length<g.snapGrid.length?g.snapGrid.length-1:g.slides.length-1);if(g.params.freeModeMomentum){if(L.length>1){var r=L.pop(),s=L.pop(),a=r.position-s.position,o=r.time-s.time;g.velocity=a/o,g.velocity=g.velocity/2,Math.abs(g.velocity)<.02&&(g.velocity=0),(o>150||(new window.Date).getTime()-r.time>300)&&(g.velocity=0)}else g.velocity=0;L.length=0;var l=1e3*g.params.freeModeMomentumRatio,p=g.velocity*l,c=g.translate+p;g.rtl&&(c=-c);var u,d=!1,h=20*Math.abs(g.velocity)*g.params.freeModeMomentumBounceRatio;if(c<g.maxTranslate())g.params.freeModeMomentumBounce?(c+g.maxTranslate()<-h&&(c=g.maxTranslate()-h),u=g.maxTranslate(),d=!0,E=!0):c=g.maxTranslate();else if(c>g.minTranslate())g.params.freeModeMomentumBounce?(c-g.minTranslate()>h&&(c=g.minTranslate()+h),u=g.minTranslate(),d=!0,E=!0):c=g.minTranslate();else if(g.params.freeModeSticky){var f,m=0;for(m=0;m<g.snapGrid.length;m+=1)if(g.snapGrid[m]>-c){f=m;break}c=Math.abs(g.snapGrid[f]-c)<Math.abs(g.snapGrid[f-1]-c)||"next"===g.swipeDirection?g.snapGrid[f]:g.snapGrid[f-1],g.rtl||(c=-c)}if(0!==g.velocity)l=Math.abs(g.rtl?(-c-g.translate)/g.velocity:(c-g.translate)/g.velocity);else if(g.params.freeModeSticky)return void g.slideReset();g.params.freeModeMomentumBounce&&d?(g.updateProgress(u),g.setWrapperTransition(l),g.setWrapperTranslate(c),g.onTransitionStart(),g.animating=!0,g.wrapper.transitionEnd(function(){g&&E&&(g.emit("onMomentumBounce",g),g.setWrapperTransition(g.params.speed),g.setWrapperTranslate(u),g.wrapper.transitionEnd(function(){g&&g.onTransitionEnd()}))})):g.velocity?(g.updateProgress(c),g.setWrapperTransition(l),g.setWrapperTranslate(c),g.onTransitionStart(),g.animating||(g.animating=!0,g.wrapper.transitionEnd(function(){g&&g.onTransitionEnd()}))):g.updateProgress(c),g.updateActiveIndex()}return void((!g.params.freeModeMomentum||n>=g.params.longSwipesMs)&&(g.updateProgress(),g.updateActiveIndex()))}var y,C=0,k=g.slidesSizesGrid[0];for(y=0;y<g.slidesGrid.length;y+=g.params.slidesPerGroup)"undefined"!=typeof g.slidesGrid[y+g.params.slidesPerGroup]?i>=g.slidesGrid[y]&&i<g.slidesGrid[y+g.params.slidesPerGroup]&&(C=y,k=g.slidesGrid[y+g.params.slidesPerGroup]-g.slidesGrid[y]):i>=g.slidesGrid[y]&&(C=y,k=g.slidesGrid[g.slidesGrid.length-1]-g.slidesGrid[g.slidesGrid.length-2]);var M=(i-g.slidesGrid[C])/k;if(n>g.params.longSwipesMs){if(!g.params.longSwipes)return void g.slideTo(g.activeIndex);"next"===g.swipeDirection&&g.slideTo(M>=g.params.longSwipesRatio?C+g.params.slidesPerGroup:C),"prev"===g.swipeDirection&&g.slideTo(M>1-g.params.longSwipesRatio?C+g.params.slidesPerGroup:C)}else{if(!g.params.shortSwipes)return void g.slideTo(g.activeIndex);"next"===g.swipeDirection&&g.slideTo(C+g.params.slidesPerGroup),"prev"===g.swipeDirection&&g.slideTo(C)}}},g._slideTo=function(e,t){return g.slideTo(e,t,!0,!0)},g.slideTo=function(e,t,n,i){"undefined"==typeof n&&(n=!0),"undefined"==typeof e&&(e=0),0>e&&(e=0),g.snapIndex=Math.floor(e/g.params.slidesPerGroup),g.snapIndex>=g.snapGrid.length&&(g.snapIndex=g.snapGrid.length-1);var s=-g.snapGrid[g.snapIndex];if(!g.params.allowSwipeToNext&&s<g.translate)return!1;if(!g.params.allowSwipeToPrev&&s>g.translate)return!1;g.params.autoplay&&g.autoplaying&&(i||!g.params.autoplayDisableOnInteraction?g.pauseAutoplay(t):g.stopAutoplay()),g.updateProgress(s);for(var a=0;a<g.slidesGrid.length;a++)-s>=g.slidesGrid[a]&&(e=a);if("undefined"==typeof t&&(t=g.params.speed),g.previousIndex=g.activeIndex||0,g.activeIndex=e,s===g.translate)return g.updateClasses(),!1;g.updateClasses(),g.onTransitionStart(n);r()?s:0,r()?0:s;return 0===t?(g.setWrapperTransition(0),g.setWrapperTranslate(s),g.onTransitionEnd(n)):(g.setWrapperTransition(t),g.setWrapperTranslate(s),g.animating||(g.animating=!0,g.wrapper.transitionEnd(function(){g&&g.onTransitionEnd(n)}))),!0},g.onTransitionStart=function(e){"undefined"==typeof e&&(e=!0),g.lazy&&g.lazy.onTransitionStart(),e&&(g.emit("onTransitionStart",g),g.activeIndex!==g.previousIndex&&g.emit("onSlideChangeStart",g))},g.onTransitionEnd=function(e){g.animating=!1,g.setWrapperTransition(0),"undefined"==typeof e&&(e=!0),g.lazy&&g.lazy.onTransitionEnd(),e&&(g.emit("onTransitionEnd",g),g.activeIndex!==g.previousIndex&&g.emit("onSlideChangeEnd",g)),g.params.hashnav&&g.hashnav&&g.hashnav.setHash()},g.slideNext=function(e,t,n){if(g.params.loop){if(g.animating)return!1;g.fixLoop();{g.container[0].clientLeft}return g.slideTo(g.activeIndex+g.params.slidesPerGroup,t,e,n)}return g.slideTo(g.activeIndex+g.params.slidesPerGroup,t,e,n)},g._slideNext=function(e){return g.slideNext(!0,e,!0)},g.slidePrev=function(e,t,n){if(g.params.loop){if(g.animating)return!1;g.fixLoop();{g.container[0].clientLeft}return g.slideTo(g.activeIndex-1,t,e,n)}return g.slideTo(g.activeIndex-1,t,e,n)},g._slidePrev=function(e){return g.slidePrev(!0,e,!0)},g.slideReset=function(e,t,n){return g.slideTo(g.activeIndex,t,e)},g.setWrapperTransition=function(e,t){g.wrapper.transition(e),"slide"!==g.params.effect&&g.effects[g.params.effect]&&g.effects[g.params.effect].setTransition(e),g.params.parallax&&g.parallax&&g.parallax.setTransition(e),g.params.scrollbar&&g.scrollbar&&g.scrollbar.setTransition(e),g.params.control&&g.controller&&g.controller.setTransition(e,t),g.emit("onSetTransition",g,e)},g.setWrapperTranslate=function(e,t,n){var i=0,s=0,a=0;r()?i=g.rtl?-e:e:s=e,g.params.virtualTranslate||g.wrapper.transform(g.support.transforms3d?"translate3d("+i+"px, "+s+"px, "+a+"px)":"translate("+i+"px, "+s+"px)"),g.translate=r()?i:s,t&&g.updateActiveIndex(),"slide"!==g.params.effect&&g.effects[g.params.effect]&&g.effects[g.params.effect].setTranslate(g.translate),g.params.parallax&&g.parallax&&g.parallax.setTranslate(g.translate),g.params.scrollbar&&g.scrollbar&&g.scrollbar.setTranslate(g.translate),g.params.control&&g.controller&&g.controller.setTranslate(g.translate,n),g.emit("onSetTranslate",g,g.translate)},g.getTranslate=function(e,t){var n,i,r,s;return"undefined"==typeof t&&(t="x"),g.params.virtualTranslate?g.rtl?-g.translate:g.translate:(r=window.getComputedStyle(e,null),window.WebKitCSSMatrix?s=new window.WebKitCSSMatrix("none"===r.webkitTransform?"":r.webkitTransform):(s=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=s.toString().split(",")),"x"===t&&(i=window.WebKitCSSMatrix?s.m41:parseFloat(16===n.length?n[12]:n[4])),"y"===t&&(i=window.WebKitCSSMatrix?s.m42:parseFloat(16===n.length?n[13]:n[5])),g.rtl&&i&&(i=-i),i||0)},g.getWrapperTranslate=function(e){return"undefined"==typeof e&&(e=r()?"x":"y"),g.getTranslate(g.wrapper[0],e)},g.observers=[],g.initObservers=function(){if(g.params.observeParents)for(var e=g.container.parents(),t=0;t<e.length;t++)o(e[t]);o(g.container[0],{childList:!1}),o(g.wrapper[0],{attributes:!1})},g.disconnectObservers=function(){for(var e=0;e<g.observers.length;e++)g.observers[e].disconnect();g.observers=[]},g.createLoop=function(){g.wrapper.children("."+g.params.slideClass+"."+g.params.slideDuplicateClass).remove();var e=g.wrapper.children("."+g.params.slideClass);g.loopedSlides=parseInt(g.params.loopedSlides||g.params.slidesPerView,10),g.loopedSlides=g.loopedSlides+g.params.loopAdditionalSlides,g.loopedSlides>e.length&&(g.loopedSlides=e.length);var t,n=[],i=[];for(e.each(function(t,r){var s=v(this);t<g.loopedSlides&&i.push(r),t<e.length&&t>=e.length-g.loopedSlides&&n.push(r),s.attr("data-swiper-slide-index",t)}),t=0;t<i.length;t++)g.wrapper.append(v(i[t].cloneNode(!0)).addClass(g.params.slideDuplicateClass));for(t=n.length-1;t>=0;t--)g.wrapper.prepend(v(n[t].cloneNode(!0)).addClass(g.params.slideDuplicateClass))},g.destroyLoop=function(){g.wrapper.children("."+g.params.slideClass+"."+g.params.slideDuplicateClass).remove(),g.slides.removeAttr("data-swiper-slide-index")},g.fixLoop=function(){var e;g.activeIndex<g.loopedSlides?(e=g.slides.length-3*g.loopedSlides+g.activeIndex,e+=g.loopedSlides,g.slideTo(e,0,!1,!0)):("auto"===g.params.slidesPerView&&g.activeIndex>=2*g.loopedSlides||g.activeIndex>g.slides.length-2*g.params.slidesPerView)&&(e=-g.slides.length+g.activeIndex+g.loopedSlides,e+=g.loopedSlides,g.slideTo(e,0,!1,!0))},g.appendSlide=function(e){if(g.params.loop&&g.destroyLoop(),"object"==typeof e&&e.length)for(var t=0;t<e.length;t++)e[t]&&g.wrapper.append(e[t]);else g.wrapper.append(e);g.params.loop&&g.createLoop(),g.params.observer&&g.support.observer||g.update(!0)},g.prependSlide=function(e){g.params.loop&&g.destroyLoop();var t=g.activeIndex+1;if("object"==typeof e&&e.length){for(var n=0;n<e.length;n++)e[n]&&g.wrapper.prepend(e[n]);t=g.activeIndex+e.length}else g.wrapper.prepend(e);g.params.loop&&g.createLoop(),g.params.observer&&g.support.observer||g.update(!0),g.slideTo(t,0,!1)},g.removeSlide=function(e){g.params.loop&&(g.destroyLoop(),g.slides=g.wrapper.children("."+g.params.slideClass));var t,n=g.activeIndex;if("object"==typeof e&&e.length){for(var i=0;i<e.length;i++)t=e[i],g.slides[t]&&g.slides.eq(t).remove(),n>t&&n--;n=Math.max(n,0)}else t=e,g.slides[t]&&g.slides.eq(t).remove(),n>t&&n--,n=Math.max(n,0);g.params.loop&&g.createLoop(),g.params.observer&&g.support.observer||g.update(!0),g.params.loop?g.slideTo(n+g.loopedSlides,0,!1):g.slideTo(n,0,!1)},g.removeAllSlides=function(){for(var e=[],t=0;t<g.slides.length;t++)e.push(t);g.removeSlide(e)},g.effects={fade:{fadeIndex:null,setTranslate:function(){for(var e=0;e<g.slides.length;e++){var t=g.slides.eq(e),n=t[0].swiperSlideOffset,i=-n;g.params.virtualTranslate||(i-=g.translate);var s=0;r()||(s=i,i=0);var a=g.params.fade.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);a>0&&1>a&&(g.effects.fade.fadeIndex=e),t.css({opacity:a}).transform("translate3d("+i+"px, "+s+"px, 0px)")}},setTransition:function(e){if(g.slides.transition(e),g.params.virtualTranslate&&0!==e){var t=null!==g.effects.fade.fadeIndex?g.effects.fade.fadeIndex:g.activeIndex;g.params.loop||g.params.fade.crossFade||0!==t||(t=g.slides.length-1),g.slides.eq(t).transitionEnd(function(){if(g)for(var e=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],t=0;t<e.length;t++)g.wrapper.trigger(e[t])})}}},cube:{setTranslate:function(){var e,t=0;g.params.cube.shadow&&(r()?(e=g.wrapper.find(".swiper-cube-shadow"),0===e.length&&(e=v('<div class="swiper-cube-shadow"></div>'),g.wrapper.append(e)),e.css({height:g.width+"px"})):(e=g.container.find(".swiper-cube-shadow"),0===e.length&&(e=v('<div class="swiper-cube-shadow"></div>'),g.container.append(e))));for(var n=0;n<g.slides.length;n++){var i=g.slides.eq(n),s=90*n,a=Math.floor(s/360);g.rtl&&(s=-s,a=Math.floor(-s/360));var o=Math.max(Math.min(i[0].progress,1),-1),l=0,p=0,c=0;n%4===0?(l=4*-a*g.size,c=0):(n-1)%4===0?(l=0,c=4*-a*g.size):(n-2)%4===0?(l=g.size+4*a*g.size,c=g.size):(n-3)%4===0&&(l=-g.size,c=3*g.size+4*g.size*a),g.rtl&&(l=-l),r()||(p=l,l=0);var u="rotateX("+(r()?0:-s)+"deg) rotateY("+(r()?s:0)+"deg) translate3d("+l+"px, "+p+"px, "+c+"px)";if(1>=o&&o>-1&&(t=90*n+90*o,g.rtl&&(t=90*-n-90*o)),i.transform(u),g.params.cube.slideShadows){var d=i.find(r()?".swiper-slide-shadow-left":".swiper-slide-shadow-top"),h=i.find(r()?".swiper-slide-shadow-right":".swiper-slide-shadow-bottom");0===d.length&&(d=v('<div class="swiper-slide-shadow-'+(r()?"left":"top")+'"></div>'),i.append(d)),0===h.length&&(h=v('<div class="swiper-slide-shadow-'+(r()?"right":"bottom")+'"></div>'),i.append(h));{i[0].progress}d.length&&(d[0].style.opacity=-i[0].progress),h.length&&(h[0].style.opacity=i[0].progress)}}if(g.wrapper.css({"-webkit-transform-origin":"50% 50% -"+g.size/2+"px","-moz-transform-origin":"50% 50% -"+g.size/2+"px","-ms-transform-origin":"50% 50% -"+g.size/2+"px","transform-origin":"50% 50% -"+g.size/2+"px"}),g.params.cube.shadow)if(r())e.transform("translate3d(0px, "+(g.width/2+g.params.cube.shadowOffset)+"px, "+-g.width/2+"px) rotateX(90deg) rotateZ(0deg) scale("+g.params.cube.shadowScale+")");else{var f=Math.abs(t)-90*Math.floor(Math.abs(t)/90),m=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),y=g.params.cube.shadowScale,w=g.params.cube.shadowScale/m,x=g.params.cube.shadowOffset;e.transform("scale3d("+y+", 1, "+w+") translate3d(0px, "+(g.height/2+x)+"px, "+-g.height/2/w+"px) rotateX(-90deg)")}var b=g.isSafari||g.isUiWebView?-g.size/2:0;g.wrapper.transform("translate3d(0px,0,"+b+"px) rotateX("+(r()?0:t)+"deg) rotateY("+(r()?-t:0)+"deg)")},setTransition:function(e){g.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),g.params.cube.shadow&&!r()&&g.container.find(".swiper-cube-shadow").transition(e)}},coverflow:{setTranslate:function(){for(var e=g.translate,t=r()?-e+g.width/2:-e+g.height/2,n=r()?g.params.coverflow.rotate:-g.params.coverflow.rotate,i=g.params.coverflow.depth,s=0,a=g.slides.length;a>s;s++){var o=g.slides.eq(s),l=g.slidesSizesGrid[s],p=o[0].swiperSlideOffset,c=(t-p-l/2)/l*g.params.coverflow.modifier,u=r()?n*c:0,d=r()?0:n*c,h=-i*Math.abs(c),f=r()?0:g.params.coverflow.stretch*c,m=r()?g.params.coverflow.stretch*c:0;Math.abs(m)<.001&&(m=0),Math.abs(f)<.001&&(f=0),Math.abs(h)<.001&&(h=0),Math.abs(u)<.001&&(u=0),Math.abs(d)<.001&&(d=0);

var y="translate3d("+m+"px,"+f+"px,"+h+"px)  rotateX("+d+"deg) rotateY("+u+"deg)";if(o.transform(y),o[0].style.zIndex=-Math.abs(Math.round(c))+1,g.params.coverflow.slideShadows){var w=o.find(r()?".swiper-slide-shadow-left":".swiper-slide-shadow-top"),x=o.find(r()?".swiper-slide-shadow-right":".swiper-slide-shadow-bottom");0===w.length&&(w=v('<div class="swiper-slide-shadow-'+(r()?"left":"top")+'"></div>'),o.append(w)),0===x.length&&(x=v('<div class="swiper-slide-shadow-'+(r()?"right":"bottom")+'"></div>'),o.append(x)),w.length&&(w[0].style.opacity=c>0?c:0),x.length&&(x[0].style.opacity=-c>0?-c:0)}}if(g.browser.ie){var b=g.wrapper[0].style;b.perspectiveOrigin=t+"px 50%"}},setTransition:function(e){g.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}}},g.lazy={initialImageLoaded:!1,loadImageInSlide:function(e,t){if("undefined"!=typeof e&&("undefined"==typeof t&&(t=!0),0!==g.slides.length)){var n=g.slides.eq(e),i=n.find(".swiper-lazy:not(.swiper-lazy-loaded):not(.swiper-lazy-loading)");!n.hasClass("swiper-lazy")||n.hasClass("swiper-lazy-loaded")||n.hasClass("swiper-lazy-loading")||i.add(n[0]),0!==i.length&&i.each(function(){var e=v(this);e.addClass("swiper-lazy-loading");var i=e.attr("data-background"),r=e.attr("data-src");g.loadImage(e[0],r||i,!1,function(){if(i?(e.css("background-image","url("+i+")"),e.removeAttr("data-background")):(e.attr("src",r),e.removeAttr("data-src")),e.addClass("swiper-lazy-loaded").removeClass("swiper-lazy-loading"),n.find(".swiper-lazy-preloader, .preloader").remove(),g.params.loop&&t){var s=n.attr("data-swiper-slide-index");if(n.hasClass(g.params.slideDuplicateClass)){var a=g.wrapper.children('[data-swiper-slide-index="'+s+'"]:not(.'+g.params.slideDuplicateClass+")");g.lazy.loadImageInSlide(a.index(),!1)}else{var o=g.wrapper.children("."+g.params.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]');g.lazy.loadImageInSlide(o.index(),!1)}}g.emit("onLazyImageReady",g,n[0],e[0])}),g.emit("onLazyImageLoad",g,n[0],e[0])})}},load:function(){if(g.params.watchSlidesVisibility)g.wrapper.children("."+g.params.slideVisibleClass).each(function(){g.lazy.loadImageInSlide(v(this).index())});else if(g.params.slidesPerView>1)for(var e=g.activeIndex;e<g.activeIndex+g.params.slidesPerView;e++)g.slides[e]&&g.lazy.loadImageInSlide(e);else g.lazy.loadImageInSlide(g.activeIndex);if(g.params.lazyLoadingInPrevNext){var t=g.wrapper.children("."+g.params.slideNextClass);t.length>0&&g.lazy.loadImageInSlide(t.index());var n=g.wrapper.children("."+g.params.slidePrevClass);n.length>0&&g.lazy.loadImageInSlide(n.index())}},onTransitionStart:function(){g.params.lazyLoading&&(g.params.lazyLoadingOnTransitionStart||!g.params.lazyLoadingOnTransitionStart&&!g.lazy.initialImageLoaded)&&g.lazy.load()},onTransitionEnd:function(){g.params.lazyLoading&&!g.params.lazyLoadingOnTransitionStart&&g.lazy.load()}},g.scrollbar={set:function(){if(g.params.scrollbar){var e=g.scrollbar;e.track=v(g.params.scrollbar),e.drag=e.track.find(".swiper-scrollbar-drag"),0===e.drag.length&&(e.drag=v('<div class="swiper-scrollbar-drag"></div>'),e.track.append(e.drag)),e.drag[0].style.width="",e.drag[0].style.height="",e.trackSize=r()?e.track[0].offsetWidth:e.track[0].offsetHeight,e.divider=g.size/g.virtualSize,e.moveDivider=e.divider*(e.trackSize/g.size),e.dragSize=e.trackSize*e.divider,r()?e.drag[0].style.width=e.dragSize+"px":e.drag[0].style.height=e.dragSize+"px",e.track[0].style.display=e.divider>=1?"none":"",g.params.scrollbarHide&&(e.track[0].style.opacity=0)}},setTranslate:function(){if(g.params.scrollbar){var e,t=g.scrollbar,n=(g.translate||0,t.dragSize);e=(t.trackSize-t.dragSize)*g.progress,g.rtl&&r()?(e=-e,e>0?(n=t.dragSize-e,e=0):-e+t.dragSize>t.trackSize&&(n=t.trackSize+e)):0>e?(n=t.dragSize+e,e=0):e+t.dragSize>t.trackSize&&(n=t.trackSize-e),r()?(t.drag.transform(g.support.transforms3d?"translate3d("+e+"px, 0, 0)":"translateX("+e+"px)"),t.drag[0].style.width=n+"px"):(t.drag.transform(g.support.transforms3d?"translate3d(0px, "+e+"px, 0)":"translateY("+e+"px)"),t.drag[0].style.height=n+"px"),g.params.scrollbarHide&&(clearTimeout(t.timeout),t.track[0].style.opacity=1,t.timeout=setTimeout(function(){t.track[0].style.opacity=0,t.track.transition(400)},1e3))}},setTransition:function(e){g.params.scrollbar&&g.scrollbar.drag.transition(e)}},g.controller={setTranslate:function(e,n){function i(t){e=t.rtl&&"horizontal"===t.params.direction?-g.translate:g.translate,r=(t.maxTranslate()-t.minTranslate())/(g.maxTranslate()-g.minTranslate()),s=(e-g.minTranslate())*r+t.minTranslate(),g.params.controlInverse&&(s=t.maxTranslate()-s),t.updateProgress(s),t.setWrapperTranslate(s,!1,g),t.updateActiveIndex()}var r,s,a=g.params.control;if(g.isArray(a))for(var o=0;o<a.length;o++)a[o]!==n&&a[o]instanceof t&&i(a[o]);else a instanceof t&&n!==a&&i(a)},setTransition:function(e,n){function i(t){t.setWrapperTransition(e,g),0!==e&&(t.onTransitionStart(),t.wrapper.transitionEnd(function(){s&&t.onTransitionEnd()}))}var r,s=g.params.control;if(g.isArray(s))for(r=0;r<s.length;r++)s[r]!==n&&s[r]instanceof t&&i(s[r]);else s instanceof t&&n!==s&&i(s)}},g.hashnav={init:function(){if(g.params.hashnav){g.hashnav.initialized=!0;var e=document.location.hash.replace("#","");if(e)for(var t=0,n=0,i=g.slides.length;i>n;n++){var r=g.slides.eq(n),s=r.attr("data-hash");if(s===e&&!r.hasClass(g.params.slideDuplicateClass)){var a=r.index();g.slideTo(a,t,g.params.runCallbacksOnInit,!0)}}}},setHash:function(){g.hashnav.initialized&&g.params.hashnav&&(document.location.hash=g.slides.eq(g.activeIndex).attr("data-hash")||"")}},g.disableKeyboardControl=function(){v(document).off("keydown",l)},g.enableKeyboardControl=function(){v(document).on("keydown",l)},g._wheelEvent=!1,g._lastWheelScrollTime=(new window.Date).getTime(),g.params.mousewheelControl){if(void 0!==document.onmousewheel&&(g._wheelEvent="mousewheel"),!g._wheelEvent)try{new window.WheelEvent("wheel"),g._wheelEvent="wheel"}catch(N){}g._wheelEvent||(g._wheelEvent="DOMMouseScroll")}g.disableMousewheelControl=function(){return g._wheelEvent?(g.container.off(g._wheelEvent,p),!0):!1},g.enableMousewheelControl=function(){return g._wheelEvent?(g.container.on(g._wheelEvent,p),!0):!1},g.parallax={setTranslate:function(){g.container.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){c(this,g.progress)}),g.slides.each(function(){var e=v(this);e.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var t=Math.min(Math.max(e[0].progress,-1),1);c(this,t)})})},setTransition:function(e){"undefined"==typeof e&&(e=g.params.speed),g.container.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function(){var t=v(this),n=parseInt(t.attr("data-swiper-parallax-duration"),10)||e;0===e&&(n=0),t.transition(n)})}},g._plugins=[];for(var A in g.plugins){var z=g.plugins[A](g,g.params[A]);z&&g._plugins.push(z)}return g.callPlugins=function(e){for(var t=0;t<g._plugins.length;t++)e in g._plugins[t]&&g._plugins[t][e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},g.emitterEventListeners={},g.emit=function(e){g.params[e]&&g.params[e](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);var t;if(g.emitterEventListeners[e])for(t=0;t<g.emitterEventListeners[e].length;t++)g.emitterEventListeners[e][t](arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);g.callPlugins&&g.callPlugins(e,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])},g.on=function(e,t){return e=u(e),g.emitterEventListeners[e]||(g.emitterEventListeners[e]=[]),g.emitterEventListeners[e].push(t),g},g.off=function(e,t){var n;if(e=u(e),"undefined"==typeof t)return g.emitterEventListeners[e]=[],g;if(g.emitterEventListeners[e]&&0!==g.emitterEventListeners[e].length){for(n=0;n<g.emitterEventListeners[e].length;n++)g.emitterEventListeners[e][n]===t&&g.emitterEventListeners[e].splice(n,1);return g}},g.once=function(e,t){e=u(e);var n=function(){t(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4]),g.off(e,n)};return g.on(e,n),g},g.a11y={makeFocusable:function(e){return e[0].tabIndex="0",e},addRole:function(e,t){return e.attr("role",t),e},addLabel:function(e,t){return e.attr("aria-label",t),e},disable:function(e){return e.attr("aria-disabled",!0),e},enable:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){13===e.keyCode&&(v(e.target).is(g.params.nextButton)?(g.onClickNext(e),g.a11y.notify(g.isEnd?g.params.lastSlideMsg:g.params.nextSlideMsg)):v(e.target).is(g.params.prevButton)&&(g.onClickPrev(e),g.a11y.notify(g.isBeginning?g.params.firstSlideMsg:g.params.prevSlideMsg)))},liveRegion:v('<span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>'),notify:function(e){var t=g.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},init:function(){if(g.params.nextButton){var e=v(g.params.nextButton);g.a11y.makeFocusable(e),g.a11y.addRole(e,"button"),g.a11y.addLabel(e,g.params.nextSlideMsg)}if(g.params.prevButton){var t=v(g.params.prevButton);g.a11y.makeFocusable(t),g.a11y.addRole(t,"button"),g.a11y.addLabel(t,g.params.prevSlideMsg)}v(g.container).append(g.a11y.liveRegion)},destroy:function(){g.a11y.liveRegion&&g.a11y.liveRegion.length>0&&g.a11y.liveRegion.remove()}},g.init=function(){g.params.loop&&g.createLoop(),g.updateContainerSize(),g.updateSlidesSize(),g.updatePagination(),g.params.scrollbar&&g.scrollbar&&g.scrollbar.set(),"slide"!==g.params.effect&&g.effects[g.params.effect]&&(g.params.loop||g.updateProgress(),g.effects[g.params.effect].setTranslate()),g.params.loop?g.slideTo(g.params.initialSlide+g.loopedSlides,0,g.params.runCallbacksOnInit):(g.slideTo(g.params.initialSlide,0,g.params.runCallbacksOnInit),0===g.params.initialSlide&&(g.parallax&&g.params.parallax&&g.parallax.setTranslate(),g.lazy&&g.params.lazyLoading&&(g.lazy.load(),g.lazy.initialImageLoaded=!0))),g.attachEvents(),g.params.observer&&g.support.observer&&g.initObservers(),g.params.preloadImages&&!g.params.lazyLoading&&g.preloadImages(),g.params.autoplay&&g.startAutoplay(),g.params.keyboardControl&&g.enableKeyboardControl&&g.enableKeyboardControl(),g.params.mousewheelControl&&g.enableMousewheelControl&&g.enableMousewheelControl(),g.params.hashnav&&g.hashnav&&g.hashnav.init(),g.params.a11y&&g.a11y&&g.a11y.init(),g.emit("onInit",g)},g.cleanupStyles=function(){g.container.removeClass(g.classNames.join(" ")).removeAttr("style"),g.wrapper.removeAttr("style"),g.slides&&g.slides.length&&g.slides.removeClass([g.params.slideVisibleClass,g.params.slideActiveClass,g.params.slideNextClass,g.params.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-column").removeAttr("data-swiper-row"),g.paginationContainer&&g.paginationContainer.length&&g.paginationContainer.removeClass(g.params.paginationHiddenClass),g.bullets&&g.bullets.length&&g.bullets.removeClass(g.params.bulletActiveClass),g.params.prevButton&&v(g.params.prevButton).removeClass(g.params.buttonDisabledClass),g.params.nextButton&&v(g.params.nextButton).removeClass(g.params.buttonDisabledClass),g.params.scrollbar&&g.scrollbar&&(g.scrollbar.track&&g.scrollbar.track.length&&g.scrollbar.track.removeAttr("style"),g.scrollbar.drag&&g.scrollbar.drag.length&&g.scrollbar.drag.removeAttr("style"))},g.destroy=function(e,t){g.detachEvents(),g.stopAutoplay(),g.params.loop&&g.destroyLoop(),t&&g.cleanupStyles(),g.disconnectObservers(),g.params.keyboardControl&&g.disableKeyboardControl&&g.disableKeyboardControl(),g.params.mousewheelControl&&g.disableMousewheelControl&&g.disableMousewheelControl(),g.params.a11y&&g.a11y&&g.a11y.destroy(),g.emit("onDestroy"),e!==!1&&(g=null)},g.init(),g}};t.prototype={isSafari:function(){var e=navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},browser:{ie:window.navigator.pointerEnabled||window.navigator.msPointerEnabled,ieTouch:window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>1||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>1},device:function(){var e=navigator.userAgent,t=e.match(/(Android);?[\s\/]+([\d.]+)?/),n=e.match(/(iPad).*OS\s([\d_]+)/),i=(e.match(/(iPod)(.*OS\s([\d_]+))?/),!n&&e.match(/(iPhone\sOS)\s([\d_]+)/));return{ios:n||i||n,android:t}}(),support:{touch:window.Modernizr&&Modernizr.touch===!0||function(){return!!("ontouchstart"in window||window.DocumentTouch&&document instanceof DocumentTouch)}(),transforms3d:window.Modernizr&&Modernizr.csstransforms3d===!0||function(){var e=document.createElement("div").style;return"webkitPerspective"in e||"MozPerspective"in e||"OPerspective"in e||"MsPerspective"in e||"perspective"in e}(),flexbox:function(){for(var e=document.createElement("div").style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),n=0;n<t.length;n++)if(t[n]in e)return!0}(),observer:function(){return"MutationObserver"in window||"WebkitMutationObserver"in window}()},plugins:{}};for(var n=(function(){var e=function(e){var t=this,n=0;for(n=0;n<e.length;n++)t[n]=e[n];return t.length=e.length,this},t=function(t,n){var i=[],r=0;if(t&&!n&&t instanceof e)return t;if(t)if("string"==typeof t){var s,a,o=t.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";for(0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),(0===o.indexOf("<td")||0===o.indexOf("<th"))&&(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select"),a=document.createElement(l),a.innerHTML=t,r=0;r<a.childNodes.length;r++)i.push(a.childNodes[r])}else for(s=n||"#"!==t[0]||t.match(/[ .<>:~]/)?(n||document).querySelectorAll(t):[document.getElementById(t.split("#")[1])],r=0;r<s.length;r++)s[r]&&i.push(s[r])}else if(t.nodeType||t===window||t===document)i.push(t);else if(t.length>0&&t[0].nodeType)for(r=0;r<t.length;r++)i.push(t[r]);return new e(i)};return e.prototype={addClass:function(e){if("undefined"==typeof e)return this;for(var t=e.split(" "),n=0;n<t.length;n++)for(var i=0;i<this.length;i++)this[i].classList.add(t[n]);return this},removeClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var i=0;i<this.length;i++)this[i].classList.remove(t[n]);return this},hasClass:function(e){return this[0]?this[0].classList.contains(e):!1},toggleClass:function(e){for(var t=e.split(" "),n=0;n<t.length;n++)for(var i=0;i<this.length;i++)this[i].classList.toggle(t[n]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n++)if(2===arguments.length)this[n].setAttribute(e,t);else for(var i in e)this[n][i]=e[i],this[n].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t++)this[t].removeAttribute(e);return this},data:function(e,t){if("undefined"==typeof t){if(this[0]){var n=this[0].getAttribute("data-"+e);return n?n:this[0].dom7ElementDataStorage&&e in this[0].dom7ElementDataStorage?this[0].dom7ElementDataStorage[e]:void 0}return void 0}for(var i=0;i<this.length;i++){var r=this[i];r.dom7ElementDataStorage||(r.dom7ElementDataStorage={}),r.dom7ElementDataStorage[e]=t}return this},transform:function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this},on:function(e,n,i,r){function s(e){var r=e.target;if(t(r).is(n))i.call(r,e);else for(var s=t(r).parents(),a=0;a<s.length;a++)t(s[a]).is(n)&&i.call(s[a],e)}var a,o,l=e.split(" ");for(a=0;a<this.length;a++)if("function"==typeof n||n===!1)for("function"==typeof n&&(i=arguments[1],r=arguments[2]||!1),o=0;o<l.length;o++)this[a].addEventListener(l[o],i,r);else for(o=0;o<l.length;o++)this[a].dom7LiveListeners||(this[a].dom7LiveListeners=[]),this[a].dom7LiveListeners.push({listener:i,liveListener:s}),this[a].addEventListener(l[o],s,r);return this},off:function(e,t,n,i){for(var r=e.split(" "),s=0;s<r.length;s++)for(var a=0;a<this.length;a++)if("function"==typeof t||t===!1)"function"==typeof t&&(n=arguments[1],i=arguments[2]||!1),this[a].removeEventListener(r[s],n,i);else if(this[a].dom7LiveListeners)for(var o=0;o<this[a].dom7LiveListeners.length;o++)this[a].dom7LiveListeners[o].listener===n&&this[a].removeEventListener(r[s],this[a].dom7LiveListeners[o].liveListener,i);return this},once:function(e,t,n,i){function r(a){n(a),s.off(e,t,r,i)}var s=this;"function"==typeof t&&(t=!1,n=arguments[1],i=arguments[2]),s.on(e,t,r,i)},trigger:function(e,t){for(var n=0;n<this.length;n++){var i;try{i=new window.CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0})}catch(r){i=document.createEvent("Event"),i.initEvent(e,!0,!0),i.detail=t}this[n].dispatchEvent(i)}return this},transitionEnd:function(e){function t(s){if(s.target===this)for(e.call(this,s),n=0;n<i.length;n++)r.off(i[n],t)}var n,i=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;if(e)for(n=0;n<i.length;n++)r.on(i[n],t);return this},width:function(){return this[0]===window?window.innerWidth:this.length>0?parseFloat(this.css("width")):null},outerWidth:function(e){return this.length>0?e?this[0].offsetWidth+parseFloat(this.css("margin-right"))+parseFloat(this.css("margin-left")):this[0].offsetWidth:null},height:function(){return this[0]===window?window.innerHeight:this.length>0?parseFloat(this.css("height")):null},outerHeight:function(e){return this.length>0?e?this[0].offsetHeight+parseFloat(this.css("margin-top"))+parseFloat(this.css("margin-bottom")):this[0].offsetHeight:null},offset:function(){if(this.length>0){var e=this[0],t=e.getBoundingClientRect(),n=document.body,i=e.clientTop||n.clientTop||0,r=e.clientLeft||n.clientLeft||0,s=window.pageYOffset||e.scrollTop,a=window.pageXOffset||e.scrollLeft;return{top:t.top+s-i,left:t.left+a-r}}return null},css:function(e,t){var n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n++)for(var i in e)this[n].style[i]=e[i];return this}if(this[0])return window.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n++)this[n].style[e]=t;return this}return this},each:function(e){for(var t=0;t<this.length;t++)e.call(this[t],t,this[t]);return this},html:function(e){if("undefined"==typeof e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t++)this[t].innerHTML=e;return this},is:function(n){if(!this[0])return!1;var i,r;if("string"==typeof n){var s=this[0];if(s===document)return n===document;if(s===window)return n===window;if(s.matches)return s.matches(n);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(n);if(s.mozMatchesSelector)return s.mozMatchesSelector(n);if(s.msMatchesSelector)return s.msMatchesSelector(n);for(i=t(n),r=0;r<i.length;r++)if(i[r]===this[0])return!0;return!1}if(n===document)return this[0]===document;if(n===window)return this[0]===window;if(n.nodeType||n instanceof e){for(i=n.nodeType?[n]:n,r=0;r<i.length;r++)if(i[r]===this[0])return!0;return!1}return!1},index:function(){if(this[0]){for(var e=this[0],t=0;null!==(e=e.previousSibling);)1===e.nodeType&&t++;return t}return void 0},eq:function(t){if("undefined"==typeof t)return this;var n,i=this.length;return t>i-1?new e([]):0>t?(n=i+t,new e(0>n?[]:[this[n]])):new e([this[t]])},append:function(t){var n,i;for(n=0;n<this.length;n++)if("string"==typeof t){var r=document.createElement("div");for(r.innerHTML=t;r.firstChild;)this[n].appendChild(r.firstChild)}else if(t instanceof e)for(i=0;i<t.length;i++)this[n].appendChild(t[i]);else this[n].appendChild(t);return this},prepend:function(t){var n,i;for(n=0;n<this.length;n++)if("string"==typeof t){var r=document.createElement("div");for(r.innerHTML=t,i=r.childNodes.length-1;i>=0;i--)this[n].insertBefore(r.childNodes[i],this[n].childNodes[0])}else if(t instanceof e)for(i=0;i<t.length;i++)this[n].insertBefore(t[i],this[n].childNodes[0]);else this[n].insertBefore(t,this[n].childNodes[0]);return this},insertBefore:function(e){for(var n=t(e),i=0;i<this.length;i++)if(1===n.length)n[0].parentNode.insertBefore(this[i],n[0]);else if(n.length>1)for(var r=0;r<n.length;r++)n[r].parentNode.insertBefore(this[i].cloneNode(!0),n[r])},insertAfter:function(e){for(var n=t(e),i=0;i<this.length;i++)if(1===n.length)n[0].parentNode.insertBefore(this[i],n[0].nextSibling);else if(n.length>1)for(var r=0;r<n.length;r++)n[r].parentNode.insertBefore(this[i].cloneNode(!0),n[r].nextSibling)},next:function(n){return new e(this.length>0?n?this[0].nextElementSibling&&t(this[0].nextElementSibling).is(n)?[this[0].nextElementSibling]:[]:this[0].nextElementSibling?[this[0].nextElementSibling]:[]:[])},nextAll:function(n){var i=[],r=this[0];if(!r)return new e([]);for(;r.nextElementSibling;){var s=r.nextElementSibling;n?t(s).is(n)&&i.push(s):i.push(s),r=s}return new e(i)},prev:function(n){return new e(this.length>0?n?this[0].previousElementSibling&&t(this[0].previousElementSibling).is(n)?[this[0].previousElementSibling]:[]:this[0].previousElementSibling?[this[0].previousElementSibling]:[]:[])},prevAll:function(n){var i=[],r=this[0];if(!r)return new e([]);for(;r.previousElementSibling;){var s=r.previousElementSibling;n?t(s).is(n)&&i.push(s):i.push(s),r=s}return new e(i)},parent:function(e){for(var n=[],i=0;i<this.length;i++)e?t(this[i].parentNode).is(e)&&n.push(this[i].parentNode):n.push(this[i].parentNode);return t(t.unique(n))},parents:function(e){for(var n=[],i=0;i<this.length;i++)for(var r=this[i].parentNode;r;)e?t(r).is(e)&&n.push(r):n.push(r),r=r.parentNode;return t(t.unique(n))},find:function(t){for(var n=[],i=0;i<this.length;i++)for(var r=this[i].querySelectorAll(t),s=0;s<r.length;s++)n.push(r[s]);return new e(n)},children:function(n){for(var i=[],r=0;r<this.length;r++)for(var s=this[r].childNodes,a=0;a<s.length;a++)n?1===s[a].nodeType&&t(s[a]).is(n)&&i.push(s[a]):1===s[a].nodeType&&i.push(s[a]);return new e(t.unique(i))},remove:function(){for(var e=0;e<this.length;e++)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){var e,n,i=this;for(e=0;e<arguments.length;e++){var r=t(arguments[e]);for(n=0;n<r.length;n++)i[i.length]=r[n],i.length++}return i}},t.fn=e.prototype,t.unique=function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t},t}()),i=["jQuery","Zepto","Dom7"],r=0;r<i.length;r++)window[i[r]]&&e(window[i[r]]);var s;s="undefined"==typeof n?window.Dom7||window.Zepto||window.jQuery:n,s&&("transitionEnd"in s.fn||(s.fn.transitionEnd=function(e){function t(s){if(s.target===this)for(e.call(this,s),n=0;n<i.length;n++)r.off(i[n],t)}var n,i=["webkitTransitionEnd","transitionend","oTransitionEnd","MSTransitionEnd","msTransitionEnd"],r=this;if(e)for(n=0;n<i.length;n++)r.on(i[n],t);return this}),"transform"in s.fn||(s.fn.transform=function(e){for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransform=n.MsTransform=n.msTransform=n.MozTransform=n.OTransform=n.transform=e}return this}),"transition"in s.fn||(s.fn.transition=function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t++){var n=this[t].style;n.webkitTransitionDuration=n.MsTransitionDuration=n.msTransitionDuration=n.MozTransitionDuration=n.OTransitionDuration=n.transitionDuration=e}return this})),window.Swiper=t}(),"undefined"!=typeof module?module.exports=window.Swiper:"function"==typeof define&&define.amd&&define([],function(){"use strict";return window.Swiper}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(window.jQuery||window.Zepto)}(function(e){var t=function(t,n,i){var r,s,a=this;t=e(t),n="function"==typeof n?n(t.val(),void 0,t,i):n;var o={getCaret:function(){try{var e,n=0,i=t.get(0),r=document.selection,s=i.selectionStart;return r&&!~navigator.appVersion.indexOf("MSIE 10")?(e=r.createRange(),e.moveStart("character",t.is("input")?-t.val().length:-t.text().length),n=e.text.length):(s||"0"===s)&&(n=s),n}catch(a){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):i.createTextRange&&(n=i.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(r){}},events:function(){t.on("keydown.mask",function(){r=o.val()}).on("keyup.mask",o.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){r===t.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("focusout.mask",function(){i.clearIfNotMatch&&!s.test(o.val())&&o.val("")})},getRegexMask:function(){for(var e,t,i,r,s=[],o=0;o<n.length;o++)(e=a.translation[n[o]])?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,(e=e.recursive)?(s.push(n[o]),r={digit:n[o],pattern:t}):s.push(i||e?t+"?":t)):s.push(n[o].replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return s=s.join(""),r&&(s=s.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(s)},destroyEvents:function(){t.off("keydown keyup paste drop change blur focusout DOMNodeInserted ".split(" ").join(".mask ")).removeData("changeCalled")},val:function(e){var n=t.is("input");return 0<arguments.length?n?t.val(e):t.text(e):n?t.val():t.text()},getMCharsBeforeCount:function(e,t){for(var i=0,r=0,s=n.length;s>r&&e>r;r++)a.translation[n.charAt(r)]||(e=t?e+1:e,i++);return i},caretPos:function(e,t,i,r){return a.translation[n.charAt(Math.min(e-1,n.length-1))]?Math.min(e+i-t-r,i):o.caretPos(e+1,t,i,r)},behaviour:function(t){t=t||window.event;var n=t.keyCode||t.which;if(-1===e.inArray(n,a.byPassKeys)){var i=o.getCaret(),r=o.val(),s=r.length,l=s>i,p=o.getMasked(),c=p.length,u=o.getMCharsBeforeCount(c-1)-o.getMCharsBeforeCount(s-1);return p!==r&&o.val(p),!l||65===n&&t.ctrlKey||(8!==n&&46!==n&&(i=o.caretPos(i,s,c,u)),o.setCaret(i)),o.callbacks(t)}},getMasked:function(e){var t,r,s=[],l=o.val(),p=0,c=n.length,u=0,d=l.length,h=1,f="push",m=-1;for(i.reverse?(f="unshift",h=-1,t=0,p=c-1,u=d-1,r=function(){return p>-1&&u>-1}):(t=c-1,r=function(){return c>p&&d>u});r();){var g=n.charAt(p),v=l.charAt(u),y=a.translation[g];y?(v.match(y.pattern)?(s[f](v),y.recursive&&(-1===m?m=p:p===t&&(p=m-h),t===m&&(p-=h)),p+=h):y.optional&&(p+=h,u-=h),u+=h):(e||s[f](g),v===g&&(u+=h),p+=h)}return e=n.charAt(t),c!==d+1||a.translation[e]||s.push(e),s.join("")},callbacks:function(e){var s=o.val(),a=s!==r;!0===a&&"function"==typeof i.onChange&&i.onChange(s,e,t,i),!0===a&&"function"==typeof i.onKeyPress&&i.onKeyPress(s,e,t,i),"function"==typeof i.onComplete&&s.length===n.length&&i.onComplete(s,e,t,i)}};a.mask=n,a.options=i,a.remove=function(){var e;return o.destroyEvents(),o.val(a.getCleanVal()).removeAttr("maxlength"),e=o.getCaret(),o.setCaret(e-o.getMCharsBeforeCount(e)),t},a.getCleanVal=function(){return o.getMasked(!0)},a.init=function(){i=i||{},a.byPassKeys=[9,16,17,18,36,37,38,39,40,91],a.translation={0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}},a.translation=e.extend({},a.translation,i.translation),a=e.extend(!0,{},a,i),s=o.getRegexMask(),!1!==i.maxlength&&t.attr("maxlength",n.length),i.placeholder&&t.attr("placeholder",i.placeholder),t.attr("autocomplete","off"),o.destroyEvents(),o.events();var r=o.getCaret();o.val(o.getMasked()),o.setCaret(r+o.getMCharsBeforeCount(r,!0))}()},n={},i=function(){var t=e(this),n={};t.attr("data-mask-reverse")&&(n.reverse=!0),"false"===t.attr("data-mask-maxlength")&&(n.maxlength=!1),t.attr("data-mask-clearifnotmatch")&&(n.clearIfNotMatch=!0),t.mask(t.attr("data-mask"),n)};e.fn.mask=function(i,r){var s=this.selector,a=function(){var n=e(this).data("mask"),s=JSON.stringify;return"object"!=typeof n||s(n.options)!==s(r)||n.mask!==i?e(this).data("mask",new t(this,i,r)):void 0};this.each(a),s&&!n[s]&&(n[s]=!0,setTimeout(function(){e(document).on("DOMNodeInserted.mask",s,a)},500))},e.fn.unmask=function(){try{return this.each(function(){e(this).data("mask").remove().removeData("mask")})}catch(t){}},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e("*[data-mask]").each(i),e(document).on("DOMNodeInserted.mask","*[data-mask]",i)}),function(e,t){var n,i="superslides";n=function(n,i){this.options=t.extend({play:!1,animation_speed:600,animation_easing:"swing",animation:"slide",inherit_width_from:e,inherit_height_from:e,pagination:!0,hashchange:!1,scrollable:!0,elements:{preserve:".preserve",nav:".slides-navigation",container:".slides-container",pagination:".slides-pagination"}},i);var r=this,s=t("<div>",{"class":"slides-control"}),a=1;this.$el=t(n),this.$container=this.$el.find(this.options.elements.container);var o=function(){return a=r._findMultiplier(),r.$el.on("click",r.options.elements.nav+" a",function(e){e.preventDefault(),r.stop(),t(this).hasClass("next")?r.animate("next",function(){r.start()}):r.animate("prev",function(){r.start()})}),t(document).on("keyup",function(e){37===e.keyCode&&r.animate("prev"),39===e.keyCode&&r.animate("next")}),t(e).on("resize",function(){setTimeout(function(){var e=r.$container.children();r.width=r._findWidth(),r.height=r._findHeight(),e.css({width:r.width,left:r.width}),r.css.containers(),r.css.images()},10)}),t(e).on("hashchange",function(){var e,t=r._parseHash();e=r._upcomingSlide(t&&!isNaN(t)?t-1:t),e>=0&&e!==r.current&&r.animate(e)}),r.pagination._events(),r.start(),r},l={containers:function(){r.init?(r.$el.css({height:r.height}),r.$control.css({width:r.width*a,left:-r.width}),r.$container.css({})):(t("body").css({margin:0}),r.$el.css({position:"relative",overflow:"hidden",width:"100%",height:r.height}),r.$control.css({position:"relative",transform:"translate3d(0)",height:"100%",width:r.width*a,left:-r.width}),r.$container.css({display:"none",margin:"0",padding:"0",listStyle:"none",position:"relative",height:"100%"})),1===r.size()&&r.$el.find(r.options.elements.nav).hide()},images:function(){var e=r.$container.find("img").not(r.options.elements.preserve);e.removeAttr("width").removeAttr("height").css({"-webkit-backface-visibility":"hidden","-ms-interpolation-mode":"bicubic",position:"absolute",left:"0",top:"0","z-index":"-1","max-width":"none"}),e.each(function(){var e=r.image._aspectRatio(this),n=this;if(t.data(this,"processed"))r.image._scale(n,e),r.image._center(n,e);else{var i=new Image;i.onload=function(){r.image._scale(n,e),r.image._center(n,e),t.data(n,"processed",!0)},i.src=this.src}})},children:function(){var e=r.$container.children();e.is("img")&&(e.each(function(){if(t(this).is("img")){t(this).wrap("<div>");var e=t(this).attr("id");t(this).removeAttr("id"),t(this).parent().attr("id",e)}}),e=r.$container.children()),r.init||e.css({display:"none",left:2*r.width}),e.css({position:"absolute",overflow:"hidden",height:"100%",width:r.width,top:0,zIndex:0})}},p={slide:function(e,t){var n=r.$container.children(),i=n.eq(e.upcoming_slide);i.css({left:e.upcoming_position,display:"block"}),r.$control.animate({left:e.offset},r.options.animation_speed,r.options.animation_easing,function(){r.size()>1&&(r.$control.css({left:-r.width}),n.eq(e.upcoming_slide).css({left:r.width,zIndex:2}),e.outgoing_slide>=0&&n.eq(e.outgoing_slide).css({left:r.width,display:"none",zIndex:0})),t()})},fade:function(e,t){var n=this,i=n.$container.children(),r=i.eq(e.outgoing_slide),s=i.eq(e.upcoming_slide);s.css({left:this.width,opacity:1,display:"block"}),e.outgoing_slide>=0?r.animate({opacity:0},n.options.animation_speed,n.options.animation_easing,function(){
n.size()>1&&(i.eq(e.upcoming_slide).css({zIndex:2}),e.outgoing_slide>=0&&i.eq(e.outgoing_slide).css({opacity:1,display:"none",zIndex:0})),t()}):(s.css({zIndex:2}),t())}};p=t.extend(p,t.fn.superslides.fx);var c={_centerY:function(e){var n=t(e);n.css({top:(r.height-n.height())/2})},_centerX:function(e){var n=t(e);n.css({left:(r.width-n.width())/2})},_center:function(e){r.image._centerX(e),r.image._centerY(e)},_aspectRatio:function(e){if(!e.naturalHeight&&!e.naturalWidth){var t=new Image;t.src=e.src,e.naturalHeight=t.height,e.naturalWidth=t.width}return e.naturalHeight/e.naturalWidth},_scale:function(e,n){n=n||r.image._aspectRatio(e);var i=r.height/r.width,s=t(e);s.css(i>n?{height:r.height,width:r.height/n}:{height:r.width*n,width:r.width})}},u={_setCurrent:function(e){if(r.$pagination){var t=r.$pagination.children();t.removeClass("current"),t.eq(e).addClass("current")}},_addItem:function(e){var n=e+1,i=n,s=r.$container.children().eq(e),a=s.attr("id");a&&(i=a);var o=t("<a>",{href:"#"+i,text:i});o.appendTo(r.$pagination)},_setup:function(){if(r.options.pagination&&1!==r.size()){var e=t("<nav>",{"class":r.options.elements.pagination.replace(/^\./,"")});r.$pagination=e.appendTo(r.$el);for(var n=0;n<r.size();n++)r.pagination._addItem(n)}},_events:function(){r.$el.on("click",r.options.elements.pagination+" a",function(e){e.preventDefault();var t=r._parseHash(this.hash),n=r._upcomingSlide(t-1);n!==r.current&&r.animate(n,function(){r.start()})})}};return this.css=l,this.image=c,this.pagination=u,this.fx=p,this.animation=this.fx[this.options.animation],this.$control=this.$container.wrap(s).parent(".slides-control"),r._findPositions(),r.width=r._findWidth(),r.height=r._findHeight(),this.css.children(),this.css.containers(),this.css.images(),this.pagination._setup(),o()},n.prototype={_findWidth:function(){return t(this.options.inherit_width_from).width()},_findHeight:function(){return t(this.options.inherit_height_from).height()},_findMultiplier:function(){return 1===this.size()?1:3},_upcomingSlide:function(e){if(/next/.test(e))return this._nextInDom();if(/prev/.test(e))return this._prevInDom();if(/\d/.test(e))return+e;if(e&&/\w/.test(e)){var t=this._findSlideById(e);return t>=0?t:0}return 0},_findSlideById:function(e){return this.$container.find("#"+e).index()},_findPositions:function(e,t){t=t||this,void 0===e&&(e=-1),t.current=e,t.next=t._nextInDom(),t.prev=t._prevInDom()},_nextInDom:function(){var e=this.current+1;return e===this.size()&&(e=0),e},_prevInDom:function(){var e=this.current-1;return 0>e&&(e=this.size()-1),e},_parseHash:function(t){return t=t||e.location.hash,t=t.replace(/^#/,""),t&&!isNaN(+t)&&(t=+t),t},size:function(){return this.$container.children().length},destroy:function(){return this.$el.removeData()},update:function(){this.css.children(),this.css.containers(),this.css.images(),this.pagination._addItem(this.size()),this._findPositions(this.current),this.$el.trigger("updated.slides")},stop:function(){clearInterval(this.play_id),delete this.play_id,this.$el.trigger("stopped.slides")},start:function(){var n=this;n.options.hashchange?t(e).trigger("hashchange"):this.animate(),this.options.play&&(this.play_id&&this.stop(),this.play_id=setInterval(function(){n.animate()},this.options.play)),this.$el.trigger("started.slides")},animate:function(t,n){var i=this,r={};if(!(this.animating||(this.animating=!0,void 0===t&&(t="next"),r.upcoming_slide=this._upcomingSlide(t),r.upcoming_slide>=this.size()))){if(r.outgoing_slide=this.current,r.upcoming_position=2*this.width,r.offset=-r.upcoming_position,("prev"===t||t<r.outgoing_slide)&&(r.upcoming_position=0,r.offset=0),i.size()>1&&i.pagination._setCurrent(r.upcoming_slide),i.options.hashchange){var s=r.upcoming_slide+1,a=i.$container.children(":eq("+r.upcoming_slide+")").attr("id");e.location.hash=a?a:s}i.$el.trigger("animating.slides",[r]),i.animation(r,function(){i._findPositions(r.upcoming_slide,i),"function"==typeof n&&n(),i.animating=!1,i.$el.trigger("animated.slides"),i.init||(i.$el.trigger("init.slides"),i.init=!0,i.$container.fadeIn("fast"))})}}},t.fn[i]=function(e,r){var s=[];return this.each(function(){var a,o,l;return a=t(this),o=a.data(i),l="object"==typeof e&&e,o||(s=a.data(i,o=new n(this,l))),"string"==typeof e&&(s=o[e],"function"==typeof s)?s=s.call(o,r):void 0}),s},t.fn[i].fx={}}(this,jQuery),function(e,t,n,i){var r,s,a;r={activateCurrent:function(e){this.html_element.find("select").val(e)},getHtml:function(){var t,n=this,i="";if(1<this.ln){for(i+='<select class="dropdown controls '+this.o.controls_cssclass+'">',this.ShowOnMenu(this.view_all_key)&&(i+='<option value="'+this.view_all_key+'">'+this.o.view_all_text+"</option>"),t=0;t<this.ln;t+=1)this.ShowOnMenu(t)&&(i+='<option value="'+(t+1)+'">'+(this.o.locations[t].title||"#"+(t+1))+"</option>");i=e(i+"</select>").bind("change",function(){n.ViewOnMap(this.value)})}return(t=this.o.controls_title)&&(t=e('<div class="controls_title"></div>').css(this.o.controls_applycss?{fontWeight:"bold",fontSize:this.o.controls_on_map?"12px":"inherit",padding:"3px 10px 5px 0"}:{}).append(this.o.controls_title)),this.html_element=e('<div class="wrap_controls"></div>').append(t).append(i)}},s={html_a:function(t,n,i){var r=this;return n=n||t+1,i=i||this.o.locations[t].title,t=e('<a data-load="'+n+'" id="ullist_a_'+n+'" href="#'+n+'" title="'+i+'"><span>'+(i||"#"+(t+1))+"</span></a>"),t.css(this.o.controls_applycss?{color:"#666",display:"block",padding:"5px",fontSize:this.o.controls_on_map?"12px":"inherit",textDecoration:"none"}:{}),t.on("click",function(t){t.preventDefault(),t=e(this).attr("data-load"),r.ViewOnMap(t)}),t},activateCurrent:function(e){this.html_element.find("li").removeClass("active"),this.html_element.find("#ullist_a_"+e).parent().addClass("active")},getHtml:function(){var t,n=e("<ul class='ullist controls "+this.o.controls_cssclass+"'></ul>").css(this.o.controls_applycss?{margin:0,padding:0,listStyleType:"none"}:{});for(this.ShowOnMenu(this.view_all_key)&&n.append(e("<li></li>").append(s.html_a.call(this,!1,this.view_all_key,this.o.view_all_text))),t=0;t<this.ln;t++)this.ShowOnMenu(t)&&n.append(e("<li></li>").append(s.html_a.call(this,t)));return(t=this.o.controls_title)&&(t=e('<div class="controls_title"></div>').css(this.o.controls_applycss?{fontWeight:"bold",padding:"3px 10px 5px 0",fontSize:this.o.controls_on_map?"12px":"inherit"}:{}).append(this.o.controls_title)),this.html_element=e('<div class="wrap_controls"></div>').append(t).append(n)}},a=function(){function t(t){this.VERSION="0.1.33",this.loaded=!1,this.markers=[],this.circles=[],this.oMap=!1,this.view_all_key="all",this.infowindow=null,this.ln=this.maxZIndex=0,this.oMap=!1,this.directionsDisplay=this.directionsService=this.Fusion=this.Polygon=this.Polyline=this.current_index=this.current_control=this.controls_wrapper=this.canvas_map=this.map_div=this.oBounds=null,this.o={debug:!1,map_div:"#gmap",controls_div:"#controls",generate_controls:!0,controls_type:"dropdown",controls_cssclass:"",controls_title:"",controls_on_map:!0,controls_applycss:!0,controls_position:n.maps.ControlPosition.RIGHT_TOP,type:"marker",view_all:!0,view_all_text:"View All",pan_on_click:!0,start:0,locations:[],shared:{},map_options:{mapTypeId:n.maps.MapTypeId.ROADMAP},stroke_options:{strokeColor:"#0000FF",strokeOpacity:.8,strokeWeight:2,fillColor:"#0000FF",fillOpacity:.4},directions_options:{travelMode:n.maps.TravelMode.DRIVING,unitSystem:n.maps.UnitSystem.METRIC,optimizeWaypoints:!1,provideRouteAlternatives:!1,avoidHighways:!1,avoidTolls:!1},circle_options:{radius:100,visible:!0},styles:{},fusion_options:{},directions_panel:null,draggable:!1,editable:!1,show_infowindows:!0,show_markers:!0,infowindow_type:"bubble",listeners:{},beforeViewAll:function(){},afterViewAll:function(){},beforeShow:function(e,t,n){},afterShow:function(e,t,n){},afterCreateMarker:function(e,t,n){},beforeCloseInfowindow:function(e,t){},afterCloseInfowindow:function(e,t){},beforeOpenInfowindow:function(e,t,n){},afterOpenInfowindow:function(e,t,n){},afterRoute:function(e,t,n){},onPolylineClick:function(e){},onPolygonClick:function(e){},circleRadiusChanged:function(e,t,n){},circleCenterChanged:function(e,t,n){},drag:function(e,t,n){},dragEnd:function(e,t,n){},dragStart:function(e,t,n){}},this.AddControl("dropdown",r),this.AddControl("list",s),t&&"directions"===t.type&&(!t.show_markers&&(t.show_markers=!1),!t.show_infowindows&&(t.show_infowindows=!1)),e.extend(!0,this.o,t)}return t.prototype.controls={},t.prototype.create_objMap=function(){var t,i=0;for(t in this.o.styles)this.o.styles.hasOwnProperty(t)&&(0===i&&(this.o.map_options.mapTypeControlOptions={mapTypeIds:[n.maps.MapTypeId.ROADMAP]}),i++,this.o.map_options.mapTypeControlOptions.mapTypeIds.push("map_style_"+i));if(this.loaded)this.oMap.setOptions(this.o.map_options);else try{this.map_div.css({position:"relative",overflow:"hidden"}),this.canvas_map=e("<div>").addClass("canvas_map").css({width:"100%",height:"100%"}).appendTo(this.map_div),this.oMap=new n.maps.Map(this.canvas_map.get(0),this.o.map_options)}catch(r){this.debug("create_objMap::"+this.map_div.selector,r.toString())}i=0;for(t in this.o.styles)this.o.styles.hasOwnProperty(t)&&(i++,this.oMap.mapTypes.set("map_style_"+i,new n.maps.StyledMapType(this.o.styles[t],{name:t})),this.oMap.setMapTypeId("map_style_"+i))},t.prototype.add_markers_to_objMap=function(){var e,t;switch(e=this.o.type||"marker"){case"marker":for(e=0;e<this.ln;e++)t=this.create_objPoint(e),this.create.marker.call(this,e,t);break;default:this.create[e].apply(this)}},t.prototype.create_objPoint=function(t){t=e.extend({},this.o.locations[t]);var r=t.visible===i?i:t.visible;return!t.type&&(t.type=this.o.type),t.map=this.oMap,t.position=new n.maps.LatLng(t.lat,t.lon),t.zIndex=t.zIndex===i?1e4:t.zIndex+100,t.visible=r===i?this.o.show_markers:r,this.o.maxZIndex=t.zIndex>this.maxZIndex?t.zIndex:this.maxZIndex,t.image&&(t.icon=new n.maps.MarkerImage(t.image,new n.maps.Size(t.image_w||32,t.image_h||32),new n.maps.Point(0,0),new n.maps.Point((t.image_w||32)/2,(t.image_h||32)/2))),t},t.prototype.create_objCircle=function(t){var n,i,r;return r=e.extend({},t),n=e.extend({},this.o.stroke_options),i=e.extend({},this.o.circle_options),e.extend(n,t.stroke_options||{}),e.extend(r,n),e.extend(i,t.circle_options||{}),e.extend(r,i),r.center=t.position,r.draggable=!1,r.zIndex=0<t.zIndex?t.zIndex-10:1,r},t.prototype.add_markerEv=function(e,t,i){var r=this;n.maps.event.addListener(i,"click",function(n){r.o.beforeShow(e,t,i),r.o.show_infowindows&&!1!==t.show_infowindow&&r.open_infowindow(e,i,n),r.o.pan_on_click&&!1!==t.pan_on_click&&(r.oMap.panTo(t.position),t.zoom&&r.oMap.setZoom(t.zoom)),r.current_control&&r.o.generate_controls&&r.current_control.activateCurrent&&r.current_control.activateCurrent.call(r,e+1),r.current_index=e,r.o.afterShow(e,t,i)}),t.draggable&&this.add_dragEv(e,t,i)},t.prototype.add_circleEv=function(e,t,i){var r=this;n.maps.event.addListener(i,"click",function(){r.ViewOnMap(e+1)}),n.maps.event.addListener(i,"center_changed",function(){r.o.circleCenterChanged(e,t,i)}),n.maps.event.addListener(i,"radius_changed",function(){r.o.circleRadiusChanged(e,t,i)}),t.draggable&&this.add_dragEv(e,t,i)},t.prototype.add_dragEv=function(e,t,i){var r=this;n.maps.event.addListener(i,"drag",function(s){var a;if(i.getPosition)s=i.getPosition();else{if(!i.getCenter)return;s=i.getCenter()}if(r.circles[e]&&r.circles[e].setCenter(s),r.Polyline?a="Polyline":r.Polygon&&(a="Polygon"),a){for(var o=r[a].getPath().getArray(),l=[],p=0;p<o.length;++p)l[p]=e===p?new n.maps.LatLng(s.lat(),s.lng()):new n.maps.LatLng(o[p].lat(),o[p].lng());r[a].setPath(new n.maps.MVCArray(l)),r.add_polyEv(a)}r.o.drag(e,t,i)}),n.maps.event.addListener(i,"dragend",function(){r.o.dragEnd(e,t,i)}),n.maps.event.addListener(i,"dragstart",function(){r.o.dragStart(e,t,i)}),n.maps.event.addListener(i,"center_changed",function(){r.markers[e]&&i.getCenter&&r.markers[e].setPosition(i.getCenter()),r.o.drag(e,t,i)})},t.prototype.add_polyEv=function(e){var t=this;n.maps.event.addListener(this[e].getPath(),"set_at",function(i,r){var s=t[e].getPath().getAt(i),s=new n.maps.LatLng(s.lat(),s.lng());t.markers[i]&&t.markers[i].setPosition(s),t.circles[i]&&t.circles[i].setCenter(s),t.o["on"+e+"Changed"](i,r,t[e].getPath().getArray())})},t.prototype.create={marker:function(e,t,i){var r;return"circle"!=t.type||i||(r=this.create_objCircle(t),t.visible||(r.draggable=t.draggable),i=new n.maps.Circle(r),this.add_circleEv(e,r,i),this.circles[e]=i),t.type="marker",i=new n.maps.Marker(t),this.add_markerEv(e,t,i),this.oBounds.extend(t.position),this.markers[e]=i,this.o.afterCreateMarker(e,t,i),i},circle:function(){var e,t,i,r;for(e=0;e<this.ln;e++)t=this.create_objPoint(e),"circle"==t.type&&(i=this.create_objCircle(t),t.visible||(i.draggable=t.draggable),r=new n.maps.Circle(i),this.add_circleEv(e,i,r),this.circles[e]=r),t.type="marker",this.create.marker.call(this,e,t,r)},polyline:function(){var t,i,r=e.extend({},this.o.stroke_options);for(r.path=[],r.draggable=this.o.draggable,r.editable=this.o.editable,r.map=this.oMap,r.zIndex=this.o.maxZIndex+100,t=0;t<this.ln;t++)i=this.create_objPoint(t),this.create.marker.call(this,t,i),r.path.push(i.position);this.Polyline?this.Polyline.setOptions(r):this.Polyline=new n.maps.Polyline(r),this.add_polyEv("Polyline")},polygon:function(){var t,i,r=this,s=e.extend({},this.o.stroke_options);for(s.path=[],s.draggable=this.o.draggable,s.editable=this.o.editable,s.map=this.oMap,s.zIndex=this.o.maxZIndex+100,t=0;t<this.ln;t++)i=this.create_objPoint(t),this.create.marker.call(this,t,i),s.path.push(i.position);this.Polygon?this.Polygon.setOptions(s):this.Polygon=new n.maps.Polygon(s),n.maps.event.addListener(this.Polygon,"click",function(e){r.o.onPolygonClick(e)}),this.add_polyEv("Polygon")},fusion:function(){this.o.fusion_options.styles=[this.o.stroke_options],this.o.fusion_options.map=this.oMap,this.Fusion?this.Fusion.setOptions(this.o.fusion_options):this.Fusion=new n.maps.FusionTablesLayer(this.o.fusion_options)},directions:function(){var t,i,r,s,a,o=this,l=[],p=0;for(t=0;t<this.ln;t++)i=this.create_objPoint(t),0===t?s=i.position:t===this.ln-1?a=i.position:(r=!0===this.o.locations[t].stopover?!0:!1,l.push({location:i.position,stopover:r})),this.create.marker.call(this,t,i);this.o.directions_options.origin=s,this.o.directions_options.destination=a,this.o.directions_options.waypoints=l,this.directionsService||(this.directionsService=new n.maps.DirectionsService),this.directionsDisplay?this.directionsDisplay.setOptions({draggable:this.o.draggable}):this.directionsDisplay=new n.maps.DirectionsRenderer({draggable:this.o.draggable}),this.directionsDisplay.setMap(this.oMap),this.o.directions_panel&&(this.o.directions_panel=e(this.o.directions_panel),this.directionsDisplay.setPanel(this.o.directions_panel.get(0))),this.o.draggable&&n.maps.event.addListener(this.directionsDisplay,"directions_changed",function(){p=o.compute_distance(o.directionsDisplay.directions),o.o.afterRoute(p)}),this.directionsService.route(this.o.directions_options,function(e,t){t===n.maps.DirectionsStatus.OK&&(p=o.compute_distance(e),o.directionsDisplay.setDirections(e)),o.o.afterRoute(p,t,e)})}},t.prototype.compute_distance=function(e){var t=0,n=e.routes[0],i=n.legs.length;for(e=0;i>e;e++)t+=n.legs[e].distance.value;return t},t.prototype.type_to_open={bubble:function(e){this.infowindow=new n.maps.InfoWindow({content:e.html||""})}},t.prototype.open_infowindow=function(e,t,n){this.CloseInfoWindow(),n=this.o.locations[e];var i=this.o.infowindow_type;n.html&&this.type_to_open[i]&&(this.o.beforeOpenInfowindow(e,n,t),this.type_to_open[i].call(this,n),this.infowindow.open(this.oMap,t),this.o.afterOpenInfowindow(e,n,t))},t.prototype.get_html_controls=function(){return this.controls[this.o.controls_type]&&this.controls[this.o.controls_type].getHtml?(this.current_control=this.controls[this.o.controls_type],this.current_control.getHtml.apply(this)):""},t.prototype.generate_controls=function(){if(this.o.controls_on_map){var t=e('<div class="on_gmap '+this.o.controls_type+' gmap_controls"></div>').css(this.o.controls_applycss?{margin:"5px"}:{}),n=e(this.get_html_controls()).css(this.o.controls_applycss?{background:"#fff",padding:"5px",border:"1px solid rgb(113,123,135)",boxShadow:"rgba(0, 0, 0, 0.4) 0px 2px 4px",maxHeight:this.map_div.find(".canvas_map").outerHeight()-80,minWidth:100,overflowY:"auto",overflowX:"hidden"}:{});t.append(n),this.oMap.controls[this.o.controls_position].push(t.get(0))}else this.controls_wrapper.empty(),this.controls_wrapper.append(this.get_html_controls())},t.prototype.init_map=function(){var e=this;this.Polyline&&this.Polyline.setMap(null),this.Polygon&&this.Polygon.setMap(null),this.Fusion&&this.Fusion.setMap(null),this.directionsDisplay&&this.directionsDisplay.setMap(null);for(var t=this.markers.length-1;t>=0;--t)try{this.markers[t]&&this.markers[t].setMap(null)}catch(i){e.debug("init_map::markers::setMap",i.stack)}for(this.markers.length=0,this.markers=[],t=this.circles.length-1;t>=0;--t)try{this.circles[t]&&this.circles[t].setMap(null)}catch(r){e.debug("init_map::circles::setMap",r.stack)}this.circles.length=0,this.circles=[],this.o.controls_on_map&&this.oMap.controls&&this.oMap.controls[this.o.controls_position].forEach(function(t,n){try{e.oMap.controls[this.o.controls_position].removeAt(n)}catch(i){e.debug("init_map::removeAt",i.stack)}}),this.oBounds=new n.maps.LatLngBounds},t.prototype.perform_load=function(){1===this.ln?(this.o.map_options.set_center?this.oMap.setCenter(new n.maps.LatLng(this.o.map_options.set_center[0],this.o.map_options.set_center[1])):(this.oMap.fitBounds(this.oBounds),this.ViewOnMap(1)),this.o.map_options.zoom&&this.oMap.setZoom(this.o.map_options.zoom)):0===this.ln?(this.o.map_options.set_center?this.oMap.setCenter(new n.maps.LatLng(this.o.map_options.set_center[0],this.o.map_options.set_center[1])):this.oMap.fitBounds(this.oBounds),this.oMap.setZoom(this.o.map_options.zoom||1)):(this.oMap.fitBounds(this.oBounds),"number"==typeof(this.o.start-0)&&0<this.o.start&&this.o.start<=this.ln?this.ViewOnMap(this.o.start):this.o.map_options.set_center?this.oMap.setCenter(new n.maps.LatLng(this.o.map_options.set_center[0],this.o.map_options.set_center[1])):this.ViewOnMap(this.view_all_key),this.o.map_options.zoom&&this.oMap.setZoom(this.o.map_options.zoom))},t.prototype.debug=function(e,t){return this.o.debug&&console.log(e,t),this},t.prototype.AddControl=function(e,t){return e&&t?(this.controls[e]=t,this):(self.debug("AddControl",'Missing "name" and "func" callback.'),!1)},t.prototype.CloseInfoWindow=function(){return this.infowindow&&(this.current_index||0===this.current_index)&&(this.o.beforeCloseInfowindow(this.current_index,this.o.locations[this.current_index]),this.infowindow.close(),this.infowindow=null,this.o.afterCloseInfowindow(this.current_index,this.o.locations[this.current_index])),this},t.prototype.ShowOnMenu=function(e){return e===this.view_all_key&&this.o.view_all&&1<this.ln?!0:(e=parseInt(e,10),"number"==typeof(e-0)&&e>=0&&e<this.ln&&!1!==this.o.locations[e].on_menu?!0:!1)},t.prototype.ViewOnMap=function(e){if(e===this.view_all_key)this.o.beforeViewAll(),this.current_index=e,0<this.o.locations.length&&this.o.generate_controls&&this.current_control&&this.current_control.activateCurrent&&this.current_control.activateCurrent.apply(this,[e]),this.oMap.fitBounds(this.oBounds),this.CloseInfoWindow(),this.o.afterViewAll();else if(e=parseInt(e,10),"number"==typeof(e-0)&&e>0&&e<=this.ln)try{n.maps.event.trigger(this.markers[e-1],"click")}catch(t){this.debug("ViewOnMap::trigger",t.stack)}return this},t.prototype.SetLocations=function(e,t){return this.o.locations=e,t&&this.Load(),this},t.prototype.AddLocations=function(t,n){var i=this;return e.isArray(t)&&e.each(t,function(e,t){i.o.locations.push(t)}),e.isPlainObject(t)&&this.o.locations.push(t),n&&this.Load(),this},t.prototype.AddLocation=function(t,n,i){return e.isPlainObject(t)&&this.o.locations.splice(n,0,t),i&&this.Load(),this},t.prototype.RemoveLocations=function(t,n){var i=this,r=0;return e.isArray(t)?e.each(t,function(e,t){t-r<i.ln&&i.o.locations.splice(t-r,1),r++}):t<this.ln&&this.o.locations.splice(t,1),n&&this.Load(),this},t.prototype.Loaded=function(){return this.loaded},t.prototype._init=function(){this.ln=this.o.locations.length;for(var t=0;t<this.ln;t++){var n=e.extend({},this.o.shared);this.o.locations[t]=e.extend(n,this.o.locations[t]),this.o.locations[t].html&&(this.o.locations[t].html=this.o.locations[t].html.replace("%index",t+1),this.o.locations[t].html=this.o.locations[t].html.replace("%title",this.o.locations[t].title||""))}return this.map_div=e(this.o.map_div),this.controls_wrapper=e(this.o.controls_div),this},t.prototype.Load=function(t){e.extend(!0,this.o,t),t&&t.locations&&(this.o.locations=t.locations),this._init(),n.maps.visualRefresh=!1===this.o.visualRefresh?!1:!0,this.init_map(),this.create_objMap(),this.add_markers_to_objMap(),1<this.ln&&this.o.generate_controls||this.o.force_generate_controls?(this.o.generate_controls=!0,this.generate_controls()):this.o.generate_controls=!1;var i=this;if(this.loaded)this.perform_load();else{n.maps.event.addListenerOnce(this.oMap,"idle",function(){i.perform_load()}),n.maps.event.addListener(this.oMap,"resize",function(){i.canvas_map.css({width:i.map_div.width(),height:i.map_div.height()})});for(var r in this.o.listeners){var s=this.oMap,a=this.o.listeners[r];this.o.listeners.hasOwnProperty(r)&&n.maps.event.addListener(this.oMap,r,function(e){a(s,e)})}}return this.loaded=!0,this},t}(),"function"==typeof define&&define.amd?define(function(){return a}):t.Maplace=a}(jQuery,this,google),function(){function e(e){video_links.children[e].classList.add("currentvid"),source[1].src=vidDir+link_list[e]+".webm",source[0].src=vidDir+link_list[e]+".mp4",currentVid=e,video.load(),video.play()}for(var t=0;t<lnkNum;t++){var n=allLnks[t].href;link_list[t]=n.match(/([^\/]+)(?=\.\w+$)/)[0],function(n){allLnks[t].onclick=function(t){t.preventDefault();for(var t=0;t<lnkNum;t++)allLnks[t].classList.remove("currentvid");e(n)}}(t)}video.addEventListener("ended",function(){allLnks[currentVid].classList.remove("currentvid"),nextVid=currentVid+1>=lnkNum?0:currentVid+1,e(nextVid)}),video.addEventListener("mouseenter",function(){video.setAttribute("controls","true")}),video.addEventListener("mouseleave",function(){video.removeAttribute("controls")});var i=function(e){return i="function"==typeof Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t=-1,n=-1;for(t=0;t<this.length;t++)if(this[t]===e){n=t;break}return n},i.call(this,e)},r=document.activeElement;index=i.call(allLnks,r),document.addEventListener("keydown",function(e){if(index){var t=document.activeElement;if(40==e.keyCode||39==e.keyCode){var n=t.nextElementSibling;n?n.focus():video_links.firstElementChild.focus()}if(38==e.keyCode||37==e.keyCode){var i=t.previousElementSibling;i?i.focus():video_links.lastElementChild.focus()}}})}(),$(window).load(function(){var e=$(window).width();481>e?$("html").addClass("m320").removeClass("m768").removeClass("desktop").removeClass("m480"):739>e?$("html").addClass("m768").removeClass("desktop").removeClass("m320").removeClass("tablet"):970>e?$("html").addClass("tablet").removeClass("desktop").removeClass("m320").removeClass("m768"):e>971&&$("html").addClass("desktop").removeClass("m320").removeClass("m768").removeClass("tablet"),650>e&&$("html").addClass("mobile-menu").removeClass("desktop-menu"),e>651&&$("html").addClass("desktop-menu").removeClass("mobile-menu")}),$(window).resize(function(){var e=$(window).width();481>e?$("html").addClass("m320").removeClass("m768").removeClass("desktop").removeClass("tablet"):669>e?$("html").addClass("m768").removeClass("desktop").removeClass("m320").removeClass("tablet"):970>e?$("html").addClass("tablet").removeClass("desktop").removeClass("m320").removeClass("m768"):e>971&&$("html").addClass("desktop").removeClass("m320").removeClass("m768").removeClass("tablet"),650>e&&$("html").addClass("mobile-menu").removeClass("desktop-menu"),e>651&&$("html").addClass("desktop-menu").removeClass("mobile-menu")}),$(document).ready(function(){$(".disabled").on("click",function(e){e.preventDefault(),e.stopPropagation()}),$(".feedback_footer").click(function(){return $(document).find(".pop-up-2").css({width:$(window).width()+"px",height:$(window).height()+"px"}).show(),$(document).find(".feedabck-box").css({left:$(window).width()/2-240,top:$(window).height()/2-180}),!1}),$(".pop-up-2 .close-btn").click(function(){$(document).find(".pop-up-2").hide()}),$(".tel").mask("+0(000)-000-00-00"),centerModals()}),$('header a[href^="#"]').bind("click.smoothscroll",function(e){e.preventDefault();var t=this.hash,n=$(t);$("html, body").stop().animate({scrollTop:n.offset().top},900,"swing",function(){window.location.hash=t})}),$(".modal").on("show.bs.modal",centerModals),$(window).on("resize",centerModals),$(window).resize(function(){});
//# sourceMappingURL=data:application/json;base64,